@using System.Text.Json
@using ZauberCMS.Components.Admin.Trees
@using ZauberCMS.Components.Editors.Dialogs
@using ZauberCMS.Components.Editors.Models
@using ZauberCMS.Core
@using ZauberCMS.Core.Shared
@implements ZauberCMS.Core.Content.Interfaces.IContentProperty

<BaseTree
    TreeAlias="@Constants.Sections.Trees.NavigationPropertyTree"
    T="NavigationItem"
    Data="@Data"
    Expand="@OnExpandHandler"
    Change="@OnChange"
    ItemContextMenu="@ItemContextMenu"
    @bind-Value="@Selection"
    HasChildren="@(e => HasChildren(e))"
    ShouldBeExpanded="@(e => ShouldBeExpanded(e))"
    Template="@(CreateTreeTemplate<object>())">
</BaseTree>

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="5" Style="margin-top: 0; padding-bottom: 0; padding-top: 10px;">
    <RadzenButton Variant="Variant.Text" Text="Add Item" Click="@(() => AddNavigationItem())"/>
    <RadzenButton Variant="Variant.Text" Text="Sort Items" Click="@(() => SortChildren(Data))"/>
</RadzenStack>

@code {
    [Inject] public ContextMenuService ContextMenuService { get; set; } = null!;
    [Inject] public TreeState TreeState { get; set; } = null!;
    
    public string Name { get; set; } = "Navigation Tree";
    public string Alias { get; set; } = "ZauberCMS.NavigationTree";
    public string Icon { get; set; } = "account_tree";
    public string Description { get; set; } = "A navigation builder in a tree";
    public Type? SettingsComponent { get; set; }
    public List<string> Scripts { get; set; } = [];
    public List<string> Styles { get; set; } = [];
    public bool FullWidth { get; set; }
    
    [Parameter] public string? Value { get; set; } = string.Empty;
    [Parameter] public string? Settings { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public Content? Content { get; set; }
    
    [CascadingParameter] public IModalService? ModalService { get; set; }

    private object Selection { get; set; } = new();
    private List<NavigationItem> Data { get; set; } = [];

    protected override void OnInitialized()
    {
        if (!Value.IsNullOrWhiteSpace())
        {
            Data = JsonSerializer.Deserialize<List<NavigationItem>>(Value) ?? [];
        }
    }

    private async Task AddNavigationItem(NavigationItem? parentNavigationItem = null)
    {
        if (ModalService != null)
        {
            var dict = new Dictionary<string, object>();
            if (parentNavigationItem != null)
            {
                dict.Add("ParentNavigationItem", parentNavigationItem);
            }
            var dialog = ModalService.OpenSidePanel<NavigationItemEditor>("Navigation Item", dict);
            var result = await dialog.Result;
            if (result is { Confirmed: true, Data: NavigationItem item })
            {
                if (parentNavigationItem != null)
                {
                  parentNavigationItem.Children.Add(item);   
                }
                else
                {
                    Data.Add(item);
                }
                Value = JsonSerializer.Serialize(Data);
                await ValueChanged.InvokeAsync(Value);
            }
        }
    }
    
    private async Task SortChildren(List<NavigationItem> items)
    {
        if (ModalService != null)
        {
            var dict = new Dictionary<string, object>
            {
                { "Items", items },
                {"PropertyAlias", Alias}
            };
            var dialog = ModalService.OpenSidePanel<NavigationItemSort>("Sort Items", dict);
            var result = await dialog.Result;
            if (result is { Confirmed: true })
            {
                Value = JsonSerializer.Serialize(Data);
                await ValueChanged.InvokeAsync(Value);
            }
        }
    }

    private async Task UpdateNavigationItem(NavigationItem item)
    {
        if (ModalService != null)
        {
            var dialog = ModalService.OpenSidePanel<NavigationItemEditor>("Navigation Item",
                new Dictionary<string, object>
                {
                    { "NavigationItem", item }
                });
            var result = await dialog.Result;
            if (result is { Confirmed: true })
            {
                Value = JsonSerializer.Serialize(Data);
                await ValueChanged.InvokeAsync(Value);
            }
        }
    }

    private void OnExpandHandler(TreeExpandEventArgs args)
    {
        if (args.Value is NavigationItem item)
        {
            args.Children.Data = item.Children;
            args.Children.TextProperty = "Name";
            args.Children.Template = CreateTreeTemplate<RadzenTreeItem>();
            
            TreeState.NodeExpanded(item.Id);
        }
    }

    private static RenderFragment<T> CreateTreeTemplate<T>() where T : class
    {
        return context => builder =>
        {
            var treeItem = context as RadzenTreeItem;
            if (treeItem?.Value is NavigationItem item)
            {
                builder.OpenComponent<RadzenIcon>(0);
                builder.AddAttribute(1, "Icon", item.ContentId != null ? "note_add" : "description");
                builder.AddAttribute(2, "style", "font-weight: 300; color: dimgray;");
                builder.CloseComponent();
                builder.AddContent(1, item.Name);
            }
        };
    }

    private bool HasChildren(object data)
    {
        if (data is NavigationItem item)
        {
            return item.Children.Any();
        }

        return false;
    }

    private bool ShouldBeExpanded(object data)
    {
        if (data is NavigationItem item)
        {
            return HasChildren(item);
        }

        return false;
    }

    private static List<ContextMenuItem> MenuItems(TreeItemContextMenuEventArgs args)
    {
        var items = new List<ContextMenuItem>();
        // Some logic here
        if (args.Value is NavigationItem navigationItem)
        {
            items.Add(new ContextMenuItem { Text = "Create", Value = 1 });
            items.Add(new ContextMenuItem { Text = "Delete", Value = 2 });
            
            if (navigationItem.Children.Any())
            {
                items.Add(new ContextMenuItem { Text = "Sort", Value = 3 });   
            }
        }
        
        return items;
    }
    
    private void ItemContextMenu(TreeItemContextMenuEventArgs args)
    {
        ContextMenuService.Open(args,
            MenuItems(args), 
            async e =>
            {
                var navigationItem = (NavigationItem)args.Value;
                //var text = args.Text;
                switch(e.Value)
                {
                    case 1:
                        ContextMenuService.Close();
                        await AddNavigationItem(navigationItem);
                        break;
                    case 2:
                        ContextMenuService.Close();
                        await Delete(navigationItem, Data);
                        break;
                    case 3:
                        ContextMenuService.Close();
                        await SortChildren(navigationItem.Children);   
                        break;
                }
            }
        );
    }

    private async Task Delete(NavigationItem item, List<NavigationItem> list)
    {
        // Direct delete from list - Check on current level
        var toBeDeleted = list.FirstOrDefault(i => i.Id == item.Id);

        if (toBeDeleted != null)
        {
            // Remove item and return
            list.Remove(toBeDeleted);
        }
        else
        {
            // If not at current level, go through children
            foreach (var child in list)
            {
               await Delete(item, child.Children);
            }
        }
        
        Value = JsonSerializer.Serialize(Data);
        await ValueChanged.InvokeAsync(Value);
    }
    
    private async Task OnChange()
    {
        if (Selection is NavigationItem item)
        {
            await UpdateNavigationItem(item);
        }
    }

}