@using System.Text.Json
@using ZauberCMS.Components.Admin.Trees
@using ZauberCMS.Components.Editors.Models
@using ZauberCMS.Components.Editors.Settings
@using ZauberCMS.Core.Media.Commands
@using ZauberCMS.Core.Media.Models
@using TupleExtensions = ZauberCMS.Core.Extensions.TupleExtensions
@implements ZauberCMS.Core.Content.Interfaces.IContentProperty

<SortableList Id="@Alias" Items="@MediaItems" OnUpdate="@SortList" Context="item">
    <SortableItemTemplate>
        <div>
            <PickerItem Text="@item.Name"
                        Icon="@item.MediaType.GetIcon()"
                        Image="@(item.MediaType == MediaType.Image ? item.Url : string.Empty)"
                        Close="@(() => DeleteMedia(item))"/>
        </div>
    </SortableItemTemplate>
</SortableList>

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem" class="rz-pt-3" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Start">
    <RadzenButton Click="@(() => AddMedia())" Variant="Variant.Text">Add Media</RadzenButton>
</RadzenStack>

@code {
    [Inject] NotificationService NotificationService { get; set; } = default!;
    [Inject] public ContextMenuService ContextMenuService { get; set; } = default!;

    public string Name { get; set; } = "Media Picker";
    public string Alias { get; set; } = "ZauberCMS.MediaPicker";
    public string Description { get; set; } = "Media picker using the media tree";
    public string Icon { get; set; } = "image";
    public Type? SettingsComponent { get; set; } = typeof(MediaPickerPropertySettings);
    public List<string> Scripts { get; set; } = [];
    public List<string> Styles { get; set; } = [];
    public bool FullWidth { get; set; }
    
    [Parameter] public string? Value { get; set; } = string.Empty;
    [Parameter] public string? Settings { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public Content? Content { get; set; }
    [CascadingParameter] public IModalService? ModalService { get; set; }

    // Hold the content guid and name in the list
    private List<Media> MediaItems { get; set; } = [];
    private IModalReference? Modal { get; set; }
    private MediaPickerSettings SettingsModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (!Value.IsNullOrWhiteSpace())
        {
            if (Guid.TryParse(Value, out var singleId)) 
            {
                // Value is a single guid
                var mediaItem = await Mediator.Send(new QueryMediaCommand
                {
                    Ids = [singleId]
                });

                MediaItems = mediaItem.Items.ToList();
            } 
            else 
            {
                // Value might be a list of guids
                var mediaIds = JsonSerializer.Deserialize<List<Guid>>(Value);
                if (mediaIds != null && mediaIds.Any())
                {
                    var mediaItems = await Mediator.Send(new QueryMediaCommand
                    {
                        Ids = mediaIds
                    });

                    MediaItems = mediaItems.Items.ToList();
                }
            }
        }

        SettingsModel = Settings.FromJson<MediaPickerSettings>();
    }

    private void SortList((int oldIndex, int newIndex) indices)
    {
        TupleExtensions.SortList(indices, MediaItems);
        StateHasChanged();
    }

    private async Task DeleteMedia(Media media)
    {
        var index = MediaItems.FindIndex(c => c.Id == media.Id);
        if (index != -1)
        {
            MediaItems.RemoveAt(index);
            await SaveAndUpdate();
        }
    }

    private void AddMedia()
    {
        var parameters = new Dictionary<string, object>
        {
            { nameof(MediaTree.ValueChanged), EventCallback.Factory.Create<object>(this, OnValueChangedHandler) }
        };

        Modal = ModalService?.OpenSidePanel<MediaTree>("Choose Media", parameters);
    }
    

    private async Task OnValueChangedHandler(object value)
    {
        if (SettingsModel.MaxAllowed != null && MediaItems.Count >= SettingsModel.MaxAllowed)
        {
            Modal?.Close();
            NotificationService.ShowErrorNotification($"You can only pick {SettingsModel.MaxAllowed}");
            return;
        }

        if (value is Media media)
        {
            if (SettingsModel.AllowedMediaTypes != null)
            {
                if (!SettingsModel.AllowedMediaTypes.Contains(media.MediaType))
                {
                    NotificationService.ShowErrorNotification("You are not allowed to pick that media type");
                    return;
                }
            }

            MediaItems.Add(media);
            await SaveAndUpdate();
            Modal?.Close();
        }
    }

    private async Task SaveAndUpdate()
    {
        if (MediaItems.Count <= 0)
        {
            Value = string.Empty;
        }
        else
        {
            Value = MediaItems.Count == 1 ?
                MediaItems[0].Id.ToString() : 
                JsonSerializer.Serialize(MediaItems.Select(x => x.Id));   
        }
        await ValueChanged.InvokeAsync(Value);
    }

}