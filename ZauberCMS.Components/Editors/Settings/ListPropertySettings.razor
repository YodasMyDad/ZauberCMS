@using ZauberCMS.Components.Editors.Models
@using ZauberCMS.Core.Content.Interfaces
@using ZauberCMS.Core.Plugins
@implements ZauberCMS.Core.Content.Interfaces.IContentPropertySettings<ListPropertySettingsModel>

<RadzenTabs TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="Settings">
            <EditorRow>
                <LeftColumn>
                    <PropertyInfo Name="Amount Allowed" Description="The maximum allowed items to be picked"/>
                </LeftColumn>
                <CentreColumn>
                    <RadzenNumeric @bind-Value="@Settings.MaxAmount" Style="width: 100%;" InputAttributes="@(new Dictionary<string, object> { { "aria-label", "enter max allowed" } })"/>
                </CentreColumn>
            </EditorRow>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Data">
            <RadzenSelectBar TValue="int" Size="ButtonSize.Small" @bind-Value="@SelectedDataSource" Style="margin-bottom: 10px;">
                <Items>
                    <RadzenSelectBarItem Value="1" Text="Manual Data" />
                    <RadzenSelectBarItem Value="2" Text="Datasource" />
                </Items>
            </RadzenSelectBar>
            
            @if (SelectedDataSource == 1)
            {
                <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="1">
                    @foreach (var item in Settings.Items)
                    {
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="1">
                            <RadzenTextBox @bind-Value="@item.Name" Placeholder="Name" class="w-100" aria-label="Name TextBox"/>
                            <RadzenTextBox @bind-Value="@item.Value" Placeholder="Value" class="w-100" aria-label="Value TextBox"/>
                            <RadzenButton Click=@(_ => AddItem()) Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.ExtraSmall" Style="width: 46px;" class="rz-border-radius-10 rz-shadow-4"/>
                            <RadzenButton Click=@(_ => RemoveItem(item)) Icon="remove" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.ExtraSmall" Style="width: 46px;" class="rz-border-radius-10 rz-shadow-4"/>
                        </RadzenStack>
                    }
                </RadzenStack>                
            }
            else
            {
                <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="1">
                    <RadzenLabel Text="Choose available data sources:"/>
                    <RadzenDropDown @bind-Value="@Settings.DataSource" Data="@DataListSources" TextProperty="Name" ValueProperty="FullName" Style="width: 100%;" Name="DataSources"/>
                    <div style="text-decoration: underline; cursor: pointer;" @onclick="ClearDatasource">Clear</div>
                </RadzenStack>
            }
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center" class="rz-mt-3">
    <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="Close" Click="Save"/>
</RadzenStack>

@code {
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;

    [Parameter] public string? SettingsModel { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    public ListPropertySettingsModel Settings { get; set; } = new();
    private List<IDataListSource> DataListSources { get; set; } = [];
    private int SelectedDataSource { get; set; } = 1;

    protected override void OnInitialized()
    {
        var items = ExtensionManager.GetInstances<IDataListSource>(true);
        DataListSources = items.Select(x => x.Value).ToList();
        Settings = this.GetPropertySettings();
        if (!Settings.Items.Any())
        {
            AddItem();
        }
    }

    private void AddItem()
    {
        Settings.Items.Add(new DataListItem());
    }
    
    private void RemoveItem(DataListItem dataListItem)
    {
        Settings.Items.Remove(dataListItem);
    }
    
    private void ClearDatasource()
    {
        Settings.DataSource = string.Empty;
    }

    private async Task Save()
    {
        Settings.Items.RemoveWhere(x => x.Name.IsNullOrWhiteSpace());
        await this.SavePropertySettings(Settings);
    }
}