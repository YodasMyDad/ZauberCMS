@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Content.Models
@using ZauberCMS.Core.Plugins

<RadzenListBox FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
               FilterOperator="StringFilterOperator.StartsWith"
               AllowFiltering="true"
               @bind-Value="@SelectedContentTypeId"
               Data="@ContentTypes"
               TextProperty="Name"
               ValueProperty="Id"
               Style="width: 100%; height: 100%;"
               InputAttributes="@(new Dictionary<string, object> { { "aria-label", "select content type" } })"
               Change="@OnPropertySelected">
    <Template>
        @((context as ContentType)?.Name)
    </Template>
</RadzenListBox>

@code {
    [Inject] public ExtensionManager ExtensionManager { get; set; } = null!;
    [Inject] public DialogService DialogService { get; set; } = null!;

    [Parameter] public bool RootOnly { get; set; }
    [Parameter] public bool? ElementTypesOnly { get; set; }
    [Parameter] public Guid? ParentId { get; set; }
    [Parameter] public EventCallback<Guid> ContentTypeSelected { get; set; } // add this line
    
    private IEnumerable<ContentType> ContentTypes { get; set; } = [];
    private Guid SelectedContentTypeId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var items = await Mediator.Send(new QueryContentTypesCommand { AmountPerPage = int.MaxValue, RootOnly = RootOnly, ElementTypesOnly = ElementTypesOnly});
        ContentTypes = items.Items;
        if (ParentId != null)
        {
            var content = await Mediator.Send(new GetContentCommand { Id = ParentId.Value });
            if (content!.ContentType?.AllowedChildContentTypes.Any() == true)
            {
                ContentTypes = ContentTypes.Where(x => content.ContentType.AllowedChildContentTypes.Contains(x.Id));
            }
        }
        StateHasChanged();
    }

    private void OnPropertySelected()
    {
        ContentTypeSelected.InvokeAsync(SelectedContentTypeId);
    }

}