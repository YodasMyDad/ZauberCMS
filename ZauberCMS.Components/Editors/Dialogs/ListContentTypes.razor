@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Media.Models
@using ZauberCMS.Core.Plugins
@if (ElementTypesOnly == true && CoverImages.Any())
{
    <div class="mx-auto">
        <div class="mt-10 grid grid-cols-1 gap-4 sm:mt-16 lg:grid-cols-6 lg:grid-rows-2">
            @foreach (var contentType in ContentTypes)
            {
                <div class="relative lg:col-span-2 cursor-pointer" @onclick="@(() => SelectContentType(contentType.Id))">
                    <div class="absolute inset-px rounded-lg"></div>
                    <div class="relative flex h-full flex-col overflow-hidden rounded-[calc(theme(borderRadius.lg)+1px)]">
                        @if (CoverImages.TryGetValue(contentType.Id, out var coverImage))
                        {
                            <img class="h-48 object-cover" src="/@coverImage.Url" alt="@contentType.Name">
                        }
                        else if (contentType.Icon != null)
                        {
                            <div class="h-48 flex text-slate-800 items-center justify-center">
                                <RadzenIcon Icon="@(contentType.Icon)" Style="--rz-icon-size: 10rem;"/>
                            </div>
                        }
                        <div class="p-10 pt-4">
                            <p class="mt-2 text-2xl font-medium tracking-tight text-gray-950 text-center">@contentType.Name</p>
                            <p class="mt-2 max-w-lg text-sm/6 text-gray-600 text-center">@contentType.Description</p>
                        </div>
                    </div>
                    <div class="pointer-events-none absolute inset-px rounded-lg shadow ring-1 ring-black/5"></div>
                </div>
            }
        </div>
    </div>
}
else
{
    <RadzenListBox FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                   FilterOperator="StringFilterOperator.StartsWith"
                   AllowFiltering="true"
                   @bind-Value="@SelectedContentTypeId"
                   Data="@ContentTypes"
                   TextProperty="Name"
                   ValueProperty="Id"
                   Style="width: 100%; height: 100%;"
                   InputAttributes="@(new Dictionary<string, object> { { "aria-label", "select content type" } })"
                   Change="@OnPropertySelected">
        <Template>
            <div class="flex space-x-2 cursor-pointer">
                @if ((context as ContentType)?.Icon != null)
                {
                    <RadzenIcon Icon="@((context as ContentType)?.Icon)"/>
                }
                <div>@((context as ContentType)?.Name)</div>
            </div>
            <div class="text-sm">@((context as ContentType)?.Description)</div>
        </Template>
    </RadzenListBox>   
}

@code {
    [Inject] public ExtensionManager ExtensionManager { get; set; } = null!;
    [Inject] public DialogService DialogService { get; set; } = null!;

    [Parameter] public bool RootOnly { get; set; }
    [Parameter] public bool? ElementTypesOnly { get; set; }
    [Parameter] public Guid? ParentId { get; set; }
    [Parameter] public EventCallback<Guid> ContentTypeSelected { get; set; } // add this line

    private IEnumerable<ContentType> ContentTypes { get; set; } = [];
    private Guid SelectedContentTypeId { get; set; }
    private Dictionary<Guid, Media> CoverImages { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        var items = await Mediator.Send(new QueryContentTypesCommand { AmountPerPage = int.MaxValue, RootOnly = RootOnly, ElementTypesOnly = ElementTypesOnly, OrderBy = GetContentTypesOrderBy.Name });
        ContentTypes = items.Items;
        if (ParentId != null)
        {
            var content = await Mediator.Send(new GetContentCommand { Id = ParentId.Value });
            if (content!.ContentType?.AllowedChildContentTypes.Any() == true)
            {
                ContentTypes = ContentTypes.Where(x => content.ContentType.AllowedChildContentTypes.Contains(x.Id));
            }
        }

        foreach (var contentType in ContentTypes)
        {
            if (contentType.MediaId != null && contentType.MediaId != Guid.Empty)
            {
                var coverImage = await Mediator.GetMedia(contentType.MediaId);
                if (coverImage != null) CoverImages.Add(contentType.Id, coverImage);
            }
        }

        //StateHasChanged();
    }

    private void OnPropertySelected()
    {
        ContentTypeSelected.InvokeAsync(SelectedContentTypeId);
    }

    private void SelectContentType(Guid contentTypeId)
    {
        SelectedContentTypeId = contentTypeId;
        ContentTypeSelected.InvokeAsync(contentTypeId);
    }

}