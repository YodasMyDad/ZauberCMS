<RadzenTextBox Placeholder="Search Icons..." Value="@SearchTerm" ValueChanged="@((string value) => Search(value))" @oninput="@(e => Search(e.Value?.ToString()))" class="w-full rz-mb-3" aria-label="Search Icons"/>
<RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
    @foreach (var icon in FilteredIcons)
    {
        <RadzenStack Style="border: 1px #e1e1e1 solid; border-radius: 2px; text-align: center; width: 100px; height: 100px; cursor: pointer; overflow: hidden"
                     Orientation="Orientation.Vertical" Gap="0" JustifyContent="JustifyContent.Center"
                     AlignItems="AlignItems.Center" @onclick="@(() => SelectIcon(icon))">
            <RadzenIcon Icon="@icon" Style="width: 50px; height: 50px; font-size: 50px; color: #2c3034;"/>
            <div class="rz-color-base-400" style="font-size: 9px">
                @icon
            </div>

        </RadzenStack>
    }
</RadzenStack>

@code {

    //[Inject] public DialogService DialogService { get; set; } = default!;
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    private List<string> Icons { get; set; } = [];
    private List<string> FilteredIcons { get; set; } = [];
    private string? SearchTerm { get; set; }

    protected override void OnInitialized()
    {
        Icons = MaterialIcons.All();
        FilteredIcons = Icons;
    }

    private void Search(string? search)
    {
        FilteredIcons = !search.IsNullOrWhiteSpace() ? Icons.Where(x => x.StartsWith(search)).ToList() : Icons;
    }

    private async Task SelectIcon(string icon)
    {
        await BlazoredModal.CloseAsync(ModalResult.Ok(icon));
    }

}