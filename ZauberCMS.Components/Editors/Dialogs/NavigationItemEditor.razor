@using ZauberCMS.Components.Admin.Trees
@using ZauberCMS.Components.Editors.Models

<EditForm Model="NavigationItem" OnValidSubmit="Save">
    <DataAnnotationsValidator/>
    <EditorRow>
        <LeftColumn>
            <PropertyInfo Name="Name" Description="The name of the navigation item"/>
        </LeftColumn>
        <CentreColumn>
            @if (NavigationItem?.ContentId != null)
            {
                <div class="text-xs font-extralight text-slate-300">ID: @NavigationItem.Id</div>
            }
            <div class="flex justify-between items-center">
                <RadzenTextBox @bind-Value="@NavigationItem!.Name" class="w-full" aria-label="Name"/>
                @if (NavigationItem?.ContentId != null)
                {
                    <RadzenButton Icon="remove_circle_outline" Variant="Variant.Text" Click="RemoveContent" class="ml-1"/>
                }
                else
                {
                    <RadzenButton Icon="add_circle_outline" Variant="Variant.Text" Click="OpenContentPicker" class="ml-1"/>
                }
            </div>
            <ValidationMessage For="() => NavigationItem!.Name" class="text-danger"/>
        </CentreColumn>
    </EditorRow>

    <EditorRow>
        <LeftColumn>
            <PropertyInfo Name="Url" Description="The url of the navigation item"/>
        </LeftColumn>
        <CentreColumn>
            <RadzenTextBox @bind-Value="@NavigationItem!.Url" class="w-full flex-1" aria-label="Url" ReadOnly="@(NavigationItem?.ContentId != null)"/>
            <ValidationMessage For="() => NavigationItem!.Url" class="text-danger"/>
        </CentreColumn>
    </EditorRow>


    <EditorRow>
        <LeftColumn>
            <PropertyInfo Name="Sort Order" Description="The position in the tree this item is"/>
        </LeftColumn>
        <CentreColumn>
            <RadzenNumeric @bind-Value="@NavigationItem!.SortOrder"/>
        </CentreColumn>
    </EditorRow>

    <EditorRow>
        <LeftColumn>
            <PropertyInfo Name="Open In New Window" Description="Open this url in a new window"/>
        </LeftColumn>
        <CentreColumn>
            <RadzenSwitch @bind-Value="@NavigationItem!.OpenInNewWindow"/>
        </CentreColumn>
    </EditorRow>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center" class="rz-mt-3">
        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Save" />
    </RadzenStack>
</EditForm>

@code
{
    [Parameter] public NavigationItem? NavigationItem { get; set; }
    [Parameter] public NavigationItem? ParentNavigationItem { get; set; }
    [CascadingParameter] public IModalService? ModalService { get; set; }
    [CascadingParameter] BlazoredModalInstance NavigationItemEditorModal { get; set; } = default!;

    private IModalReference? Modal { get; set; }

    protected override void OnInitialized()
    {
        NavigationItem ??= new NavigationItem();
    }

    private void RemoveContent()
    {
        NavigationItem!.ContentId = null;
        NavigationItem.Url = string.Empty;
        NavigationItem.Name = string.Empty;
    }

    private void OpenContentPicker()
    {
        var parameters = new Dictionary<string, object>
        {
            { nameof(ContentTree.ValueChanged), EventCallback.Factory.Create<object>(this, ContentPicked) }
        };

        Modal = ModalService?.OpenSidePanel<ContentTree>("Choose Content", parameters);
    }

    private Task ContentPicked(object value)
    {
        Modal!.Close();

        if (value is Content content)
        {
            NavigationItem!.ContentId = content.Id;
            NavigationItem.Url = content.Url;
            NavigationItem.Name = content.Name;
        }

        return Task.CompletedTask;
    }

    private async Task Save()
    {
        await NavigationItemEditorModal.CloseAsync(ModalResult.Ok(NavigationItem));
    }
}