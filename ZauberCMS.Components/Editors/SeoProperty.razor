@using System.Text.Json
@using ZauberCMS.Components.Editors.Models
@using ZauberCMS.Core.Seo.Models
@using ZauberCMS.Core.Shared.Models
@using ZauberCMS.Components.Seo
@implements ZauberCMS.Core.Content.Interfaces.IContentProperty

<RadzenTabs TabPosition="TabPosition.Left">
    <Tabs>
        <RadzenTabsItem Text="Fields">
            <EditorRow>
                <LeftColumn>
                    <PropertyInfo Name="Page Title"
                                  Description="The title that appears in search engine results and browser tabs. Keep it under 60 characters for the best SEO results."/>
                </LeftColumn>
                <CentreColumn>
                    <RadzenTextBox Change="@(async () => await NotifyValueChanged())"
                                   @bind-Value="@Meta.PageTitle"
                                   class="form-control w-full"
                                   MaxLength="80"/>
                    @if (!string.IsNullOrEmpty(Meta.PageTitle) && Meta.PageTitle.Length > 60)
                    {
                        <div class="mt-1">
                            <TailwindAlert Type="AlertType.Warning" Title="@($"Page title is {Meta.PageTitle.Length} characters")" />
                        </div>
                    }

                </CentreColumn>
            </EditorRow>

            <EditorRow>
                <LeftColumn>
                    <PropertyInfo Name="Meta Description"
                                  Description="A short summary of the page that appears in search results. Aim for 150–160 characters to ensure it's fully visible."/>
                </LeftColumn>
                <CentreColumn>
                    <RadzenTextArea
                        oninput="event.target.style.height = Math.max(event.target.clientHeight, event.target.scrollHeight) + 'px';"
                        Change="@(async () => await NotifyValueChanged())"
                        @bind-Value="@Meta.MetaDescription"
                        class="form-control w-full" MaxLength="160"/>
                    @if (!string.IsNullOrEmpty(Meta.MetaDescription) && Meta.MetaDescription.Length > 160)
                    {
                        <div class="mt-1">
                            <TailwindAlert Type="AlertType.Warning" Title="@($"Meta description is {Meta.MetaDescription.Length} characters")" />
                        </div>
                    }
                </CentreColumn>
            </EditorRow>

            <EditorRow>
                <LeftColumn>
                    <PropertyInfo Name="Open Graph Image"
                                  Description="The image used when your page is shared on social media (Facebook, X, etc.). Upload a high-quality image, ideally 1200x630 pixels."/>
                </LeftColumn>
                <CentreColumn>
                    <MediaPickerProperty
                        Value="@(Meta.OpenGraphImage != null ? Meta.OpenGraphImage.ToString() : string.Empty)"
                        Settings="@(JsonSerializer.Serialize(new MediaPickerSettings { MaxAllowed = 1 }))"
                        ValueChanged="@(e => SetOpenGraphMedia(e))"/>
                </CentreColumn>
            </EditorRow>

            <EditorRow>
                <LeftColumn>
                    <PropertyInfo Name="Hide From Search Engines"
                                  Description="Prevents this page from appearing in Google and other search engines. Use this for private or low-value pages."/>
                </LeftColumn>
                <CentreColumn>
                    <RadzenSwitch @bind-Value="@Meta.HideFromSearchEngines"
                                  Change="@(async () => await NotifyValueChanged())"
                                  InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Hide from search engines" } })"/>
                </CentreColumn>
            </EditorRow>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Sitemap">
            <EditorRow>
                <LeftColumn>
                    <PropertyInfo Name="Exclude From Sitemap"
                                  Description="Removes this page from your website's sitemap, so search engines won't prioritize it. Useful for utility pages or duplicates."/>
                </LeftColumn>
                <CentreColumn>
                    <RadzenSwitch @bind-Value="@Meta.ExcludeFromSitemap"
                                  Change="@(async () => await NotifyValueChanged())"
                                  InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Exclude from sitemap" } })"/>
                </CentreColumn>
            </EditorRow>
            <EditorRow>
                <LeftColumn>
                    <PropertyInfo Name="Change Frequency"
                                  Description="How frequently the page is likely to change. This affects how search engines treat your page."/>
                </LeftColumn>
                <CentreColumn>
                    <RadzenDropDown
                        @bind-Value="Meta.ChangeFrequency"
                        Data="ChangeFrequencies"
                        Style="width: 100%;" />
                </CentreColumn>
            </EditorRow>

            <EditorRow>
                <LeftColumn>
                    <PropertyInfo Name="Priority"
                                  Description="Relative importance of this page compared to other pages on your site."/>
                </LeftColumn>
                <CentreColumn>
                    <RadzenNumeric Style="width: 100%;" TValue="double" @bind-Value="@Meta.Priority" />
                </CentreColumn>
            </EditorRow>
        </RadzenTabsItem>
        <RadzenTabsItem Text="SEO Checker">
            <SeoChecker Content="Content" FullUrl="@FullUrl" />
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    public string Name => "SEO";
    public string Alias => "ZauberCMS.Seo";
    public string Description => "Adds meta and SEO tools to your page";
    public string Icon => "show_chart";
    public Type? SettingsComponent { get; set; }
    public List<string> Scripts { get; set; } = [];
    public List<string> Styles { get; set; } = [];
    public bool FullWidth { get; set; } = true;
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public string? Settings { get; set; } = string.Empty;
    [Parameter] public Content? Content { get; set; }
    
    [CascadingParameter] public IModalService? ModalService { get; set; }
    
    private Meta Meta { get; set; } = new();
    private string? FullUrl { get; set; }
    
    public SeoSitemapChangeFrequency[] ChangeFrequencies { get; set; } =
        Enum.GetValues(typeof(SeoSitemapChangeFrequency)).Cast<SeoSitemapChangeFrequency>().ToArray();

    
    private async Task SetOpenGraphMedia(string? e)
    {
        if (e.IsNullOrWhiteSpace())
        {
            Meta.OpenGraphImage = null;
        }
        else
        {
            if (Guid.TryParse(e, out var ogi))
            {
                Meta.OpenGraphImage = ogi;
            }
        }

        await NotifyValueChanged();
    }
    
    protected override void OnInitialized()
    {
        if (!Value.IsNullOrWhiteSpace())
        {
            Meta = JsonSerializer.Deserialize<Meta>(Value) ?? new Meta();
        }

        var currentUri = new Uri(NavigationManager.BaseUri);
        FullUrl = $"{currentUri}{Content?.Url}";

        //SettingsModel = Settings.FromJson<MediaPickerSettings>();
    }

    private async Task NotifyValueChanged()
    {
        // Serialize Meta object to JSON and notify parent
        var jsonValue = JsonSerializer.Serialize(Meta);
        await ValueChanged.InvokeAsync(jsonValue);
    }

}