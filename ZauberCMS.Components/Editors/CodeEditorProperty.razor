@using System.Diagnostics.CodeAnalysis
@using ZauberCMS.Components.Editors.Models
@using ZauberCMS.Components.Editors.Settings
@using BlazorMonaco.Editor
@implements ZauberCMS.Core.Content.Interfaces.IContentProperty

<style>
    .monaco-editor-container {height: @(SettingsModel.Height)px;}
</style>

<div>
 <StandaloneCodeEditor @ref="_editor" OnDidChangeModelContent="@(e => OnChangeEditor(e))" ConstructionOptions="EditorConstructionOptions" />
</div>

@code {
    [Parameter] public string? Value { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public string? Settings { get; set; } = string.Empty;
    [Parameter] public Content? Content { get; set; }
    [CascadingParameter] public IModalService? ModalService { get; set; }
    
    [AllowNull]
    private StandaloneCodeEditor _editor = null!;
    
    public string Name { get; set; } = "Code Editor";
    public string Alias { get; set; } = "ZauberCMS.CodeEditor";
    public string Icon { get; set; } = "code";
    public string Description { get; set; } = "Editor for writing code";
    public Type? SettingsComponent { get; set; } = typeof(CodeEditorPropertySettings);
    public bool FullWidth { get; set; }
    public List<string> Scripts { get; set; } = [
        "_content/BlazorMonaco/jsInterop.js", 
        "_content/BlazorMonaco/lib/monaco-editor/min/vs/loader.js", 
        "_content/BlazorMonaco/lib/monaco-editor/min/vs/editor/editor.main.js"
    ];
    public List<string> Styles { get; set; } = [];

    private CodeEditorPropertySettingsModel SettingsModel { get; set; } = new();
    protected override void OnInitialized()
    {
        SettingsModel = Settings.FromJson<CodeEditorPropertySettingsModel>();
    }
    
    private async Task OnChangeEditor(ModelContentChangedEvent e)
    {
        Code = await _editor.GetValue();
    }
    
    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            GlyphMargin = true,
            Value = Code,
            Language = SettingsModel.Language,
            Theme = "vs"
        };
    }
    
    private string? Code
    {
        get => Value;
        set
        {
            if (Value != value)
            {
                Value = value;
                ValueChanged.InvokeAsync(Value);
            }
        }
    }
}