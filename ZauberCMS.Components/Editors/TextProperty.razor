@using ZauberCMS.Components.Editors.Models
@using ZauberCMS.Components.Editors.Settings
@implements ZauberCMS.Core.Content.Interfaces.IContentProperty

<RadzenTextBox @ref="TextBoxReference" Value="@Value" 
               ValueChanged="@((string value) => ValueChanged.InvokeAsync(value))"
               ValueExpression="@(() => Value)" class="form-control w-full" @attributes="GetAdditionalAttributes()" />

@if (SettingsModel.MaxLength != null)
{
    <div>
        <RadzenText TextStyle="TextStyle.Caption">Max Length: @SettingsModel.MaxLength</RadzenText>
    </div>
}

@code {
    
    [Parameter] public string? Value { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public string? Settings { get; set; } = string.Empty;
    [Parameter] public Content? Content { get; set; }
    [CascadingParameter] public IModalService? ModalService { get; set; }
    public List<string> Scripts { get; set; } = [];
    public List<string> Styles { get; set; } = [];
    
    public string Name { get; set; } = "Textbox";
    public string Alias { get; set; } = "ZauberCMS.Textbox";
    public string Icon { get; set; } = "border_color";
    public string Description { get; set; } = "Standard text box";
    public Type? SettingsComponent { get; set; } = typeof(TextContentSettings);

    private TextContentSettingsModel SettingsModel { get; set; } = new();
    private RadzenTextBox? TextBoxReference { get; set; }

    protected override void OnInitialized()
    {
        SettingsModel = Settings.FromJson<TextContentSettingsModel>();
    }

    private IEnumerable<KeyValuePair<string, object?>> GetAdditionalAttributes()
    {
        var attributes = new List<KeyValuePair<string, object?>>();

        if (SettingsModel.MaxLength.HasValue)
        {
            attributes.Add(new KeyValuePair<string, object?>("MaxLength", SettingsModel.MaxLength));
        }

        return attributes;
    }

}