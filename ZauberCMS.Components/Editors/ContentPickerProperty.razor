@using ZauberCMS.Components.Admin.Trees
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Components.Editors.Settings
@using ZauberCMS.Components.Editors.Models
@using System.Text.Json
@using TupleExtensions = ZauberCMS.Core.Extensions.TupleExtensions
@implements ZauberCMS.Core.Content.Interfaces.IContentProperty

<SortableList Id="@Alias" Items="@ContentItems" OnUpdate="@SortList" Context="item">
    <SortableItemTemplate>
        <div>
            <PickerItem Text="@item.Name" Icon="@item.ContentType?.Icon" Close="@(() => DeleteContent(item))"/>
        </div>
    </SortableItemTemplate>
</SortableList>

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem" class="rz-pt-3" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Start">
    <RadzenButton Variant="Variant.Text" Click="@(() => AddContent())">Add Content</RadzenButton>
</RadzenStack>

@code {
    [Inject] NotificationService NotificationService { get; set; } = default!;
    
    public string Name { get; set; } = "Content Picker";
    public string Alias { get; set; } = "ZauberCMS.ContentPicker";
    public string Description { get; set; } = "Content picker using the content tree";
    public string Icon { get; set; } = "account_tree";
    public Type? SettingsComponent { get; set; } = typeof(ContentPickerPropertySettings);

    [Parameter] public string? Value { get; set; } = string.Empty;
    [Parameter] public string? Settings { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public Content? Content { get; set; }
    [CascadingParameter] public IModalService? ModalService { get; set; }
    public List<string> Scripts { get; set; } = [];
    public List<string> Styles { get; set; } = [];
    public bool FullWidth { get; set; }

    // Hold the content guid and name in the list
    private List<Content> ContentItems { get; set; } = [];
    private IModalReference? Modal { get; set; }
    private ContentPickerSettings SettingsModel { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        if (!Value.IsNullOrWhiteSpace())
        {
            if (Guid.TryParse(Value, out var singleId)) 
            {
                // Value is a single guid
                var contentItem = await Mediator.Send(new QueryContentCommand
                {
                    Ids = [singleId]
                });

                ContentItems = contentItem.Items.ToList();
            } 
            else 
            {
                // Value might be a list of guids
                var contentIds = JsonSerializer.Deserialize<List<Guid>>(Value);
                if (contentIds != null && contentIds.Any())
                {
                    var contentItems = await Mediator.Send(new QueryContentCommand
                    {
                        Ids = contentIds
                    });

                    ContentItems = contentItems.Items.ToList();
                }
            }
        }
        
        SettingsModel = Settings.FromJson<ContentPickerSettings>();
    }
    
    private void SortList((int oldIndex, int newIndex) indices)
    {
        TupleExtensions.SortList(indices, ContentItems);
        StateHasChanged();
    }

    private async Task DeleteContent(Content content)
    {
        var index = ContentItems.FindIndex(c => c.Id == content.Id);
        if (index != -1)
        {
            ContentItems.RemoveAt(index);
            await SaveAndUpdate();
        }
    }

    private void AddContent()
    {
        var parameters = new Dictionary<string, object>
        {
            { nameof(ContentTree.ValueChanged), EventCallback.Factory.Create<object>(this, OnValueChangedHandler) }
        };

        Modal = ModalService?.OpenSidePanel<ContentTree>("Choose Content", parameters);
    }

    private async Task OnValueChangedHandler(object value)
    {
        if (SettingsModel.MaxAllowed != null && ContentItems.Count >= SettingsModel.MaxAllowed)
        {
            Modal?.Close();
            NotificationService.ShowErrorNotification($"You can only pick {SettingsModel.MaxAllowed}");
            return;
        }

        if (value is Content content)
        {
            if (SettingsModel.AllowedContentTypes != null)
            {
                if (!SettingsModel.AllowedContentTypes.Contains(content.ContentTypeId))
                {
                    NotificationService.ShowErrorNotification("You are not allowed to pick that content type");
                    return;
                }
            }

            ContentItems.Add(content);
            await SaveAndUpdate();
            Modal?.Close();
        }
    }

    private async Task SaveAndUpdate()
    {
        if (ContentItems.Count <= 0)
        {
            Value = string.Empty;
        }
        else
        {
            Value = ContentItems.Count == 1 ?
                ContentItems[0].Id.ToString() : 
                JsonSerializer.Serialize(ContentItems.Select(x => x.Id));   
        }
        await ValueChanged.InvokeAsync(Value);
    }

}