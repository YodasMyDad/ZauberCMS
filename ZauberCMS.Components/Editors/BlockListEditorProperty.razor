@using System.Text.Json
@using ZauberCMS.Components.ContentComponents
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Content.Interfaces
@using TupleExtensions = ZauberCMS.Core.Extensions.TupleExtensions
@implements ZauberCMS.Core.Content.Interfaces.IContentProperty

<SortableList Id="@Alias" Items="@ContentItems" OnUpdate="@SortList" Context="item">
    <SortableItemTemplate>
        <div>
            <div class="w-full flex justify-between items-start border my-1 notextselection cursor-grab">
                <div class="p-3 flex items-center justify-center">
                    <RadzenIcon Icon="@(ContentTypes[item!.ContentTypeId].Icon ?? "layers")" Style="font-size: 2rem" class="text-slate-600" />
                </div>
                <div class="p-3 flex-1 col-span-8 border-l border-r">
                    <RenderBlock Content="@(item)" Stylesheet="/css/styles.css"
                                 TView="IContentBlockPreview"
                                 FallbackComponentType="@(typeof(ContentBlockPreviewFallback))"
                                 Parameters="@(new Dictionary<string, object> { { nameof(IContentBlockPreview.ContentType), ContentTypes[item!.ContentTypeId]} })"/>
                </div>
                <div class="p-3 flex items-center justify-center cursor-pointer" @onclick="@(() => UpdateContent(item))">
                    <RadzenIcon Icon="edit" Style="font-size: 2rem" class="text-slate-600" />
                </div>
                <div class="p-3 flex items-center justify-center cursor-pointer" @onclick="@(() => DeleteContent(item))">
                    <RadzenIcon Icon="delete" Style="font-size: 2rem" class="text-slate-600" />
                </div>
            </div>
        </div>
    </SortableItemTemplate>
</SortableList>

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem" class="rz-pt-3" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
    <RadzenButton Icon="add" Size="ButtonSize.Medium" Click="@(() => UpdateContent())" class="rz-border-radius-10" />
</RadzenStack>

@code {
    public string Name { get; set; } = "Block List Editor";
    public string Alias { get; set; } = "ZauberCMS.BlockListEditor";
    public string Description { get; set; } = "Creates a list of content blocks";
    public string Icon { get; set; } = "format_align_justify";
    public Type? SettingsComponent { get; set; }
    [Parameter] public string? Value { get; set; } = string.Empty;
    [Parameter] public string? Settings { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public Content? Content { get; set; }
    [CascadingParameter] public IModalService? ModalService { get; set; }
    private List<Content> ContentItems { get; set; } = new();
    private Dictionary<Guid, ContentType> ContentTypes { get; set; } = [];
    public List<string> Scripts { get; set; } = [];
    public List<string> Styles { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await PopulateContentTypes();
        if (!Value.IsNullOrWhiteSpace())
        {
            ContentItems = JsonSerializer.Deserialize<List<Content>>(Value) ?? [];
        }
    }

    private async Task PopulateContentTypes()
    {
        var contentTypes = await Mediator.Send(new QueryContentTypesCommand { AmountPerPage = 300});
        ContentTypes = contentTypes.Items.ToDictionary(x => x.Id, x => x);
    }
    
    private void DeleteContent(Content content)
    {
        var index = ContentItems.FindIndex(c => c.Id == content.Id);
        if (index != -1)
        {
            ContentItems.RemoveAt(index);
        }
    }

    private async Task UpdateContent(Content? contentUpdate = null)
    {
        var contentParams = new Dictionary<string, object> { { "IsBlockList", true } };
        if (contentUpdate != null)
        {
            contentParams.Add("Content", contentUpdate);
        }

        if (ModalService != null)
        {
            var dialog = ModalService.OpenSidePanel<ContentEditor>("Add Content", contentParams);
            var result = await dialog.Result;
            if (result is { Confirmed: true, Data: Content content })
            {
                // This could be an issue and close dialogs on property editors!
                //DialogService.CloseSide();

                if (contentUpdate != null)
                {
                    var index = ContentItems.FindIndex(c => c.Id == contentUpdate.Id);
                    if (index != -1)
                    {
                        ContentItems[index] = content;
                    }
                    else
                    {
                        // Should never get here
                        throw new Exception("Content with given id not found.");
                    }
                }
                else
                {
                    ContentItems.Add(content);
                }

                await SaveItems();
            }
        }
    }

    private async Task SaveItems()
    {
        foreach (var content in ContentItems)
        {
            // Remove content type and content values as don't want to serialise this
            content.ContentType = null;
            content.ContentTypeAlias = ContentTypes[content.ContentTypeId].Alias;
        }
        
        Value = JsonSerializer.Serialize(ContentItems);
        await ValueChanged.InvokeAsync(Value);
    }
    
    private async Task SortList((int oldIndex, int newIndex) indices)
    {
        TupleExtensions.SortList(indices, ContentItems);
        await SaveItems();
        StateHasChanged();
    }


}