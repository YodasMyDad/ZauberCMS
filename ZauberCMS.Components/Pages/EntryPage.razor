@using System.Collections.Concurrent
@using Microsoft.Extensions.Options
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Content.Interfaces
@using ZauberCMS.Core.Plugins
@using ZauberCMS.Core.Settings
@using ZauberCMS.Core.Shared.Services
@implements IDisposable

@if (ComponentView != null)
{
    <LayoutView Layout="LayoutType">
        <DynamicComponent Type="@ComponentView.GetType()" Parameters="@Parameters" />
    </LayoutView>
}

@code {
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;
    [Inject] public LayoutResolverService LayoutResolver { get; set; } = default!;
    [Inject] public IOptions<ZauberSettings> Settings { get; set; } = default!;
    [Inject] public PersistentComponentState ApplicationState { get; set; } = default!;

    [Parameter] public string? Slug { get; set; }

    private Content? Content { get; set; }
    private Dictionary<string, string> LanguageKeys { get; set; } = [];
    private ConcurrentDictionary<string, IContentView> AllContentViews { get; set; } = new();
    private IContentView? ComponentView { get; set; }
    private Dictionary<string, object> Parameters { get; set; } = new();
    private Type LayoutType { get; set; } = default!;
    private PersistingComponentStateSubscription? PersistingSubscription { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        PersistingSubscription = ApplicationState.RegisterOnPersisting(PersistState);
        var instances = ExtensionManager.GetInstances<IContentView>(true);
        AllContentViews = new ConcurrentDictionary<string, IContentView>(instances);
        
        if (!ApplicationState.TryTakeFromJson<Content>("ContentState", out var restoredContent))
        {
            var entryModel = await Mediator.Send(new GetContentFromRequestCommand { Slug = Slug, IsRootContent = Slug == null, Url = NavigationManager.Uri });
            Content = entryModel.Content;
            LanguageKeys = entryModel.LanguageKeys;
        }
        else
        {
            Content = restoredContent;
            LanguageKeys = ApplicationState.TryTakeFromJson<Dictionary<string, string>>("LanguageKeysState", out var restoredKeys)
                ? restoredKeys!
                : new Dictionary<string, string>();
        }
        
        if (Content != null)
        {
            if (AllContentViews.TryGetValue(Content.ViewComponent, out var contentView))
            {
                ComponentView = contentView;
                LayoutType = LayoutResolver.GetLayoutType(ComponentView.GetType());
                Parameters = new Dictionary<string, object> { ["Content"] = Content, ["LanguageKeys"] = LanguageKeys };
            }
            else if (AllContentViews.TryGetValue(Settings.Value.MissingView!, out var missing))
            {
                ComponentView = missing;
                LayoutType = LayoutResolver.GetLayoutType(ComponentView.GetType());
                Parameters = new Dictionary<string, object> { ["Content"] = Content, ["LanguageKeys"] = LanguageKeys };
            }
        }
        else
        {
            var hasContent = await Mediator.Send(new AnyContentCommand());
            if (hasContent)
            {
                if (AllContentViews.TryGetValue(Settings.Value.NotFoundComponent!, out var notFound))
                {
                    ComponentView = notFound;
                    LayoutType = LayoutResolver.GetLayoutType(ComponentView.GetType());
                }
            }
            else if (AllContentViews.TryGetValue(Settings.Value.StarterComponent!, out var starter))
            {
                ComponentView = starter;
                LayoutType = LayoutResolver.GetLayoutType(ComponentView.GetType());
            }
        }
    }

    private Task PersistState()
    {
        ApplicationState.PersistAsJson("ContentState", Content);
        ApplicationState.PersistAsJson("LanguageKeysState", LanguageKeys);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        PersistingSubscription?.Dispose();
    }
}
