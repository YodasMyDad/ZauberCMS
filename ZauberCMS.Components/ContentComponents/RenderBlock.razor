@using ZauberCMS.Core.Content.Interfaces
@using ZauberCMS.Core.Plugins
@typeparam TView where TView : IContentBlock

@if (Content != null && BlockViews != null)
{
    var contentTypeAlias = Content.ContentTypeAlias;
    var blockViewPair = BlockViews.FirstOrDefault(pair => pair.Value.ContentTypeAlias == contentTypeAlias);
    
    if (blockViewPair.Value != null)
    {
        <div @ref="_componentDiv">
            <DynamicComponent Parameters="@(Parameters)" Type="@blockViewPair.Value.GetType()" />
        </div>
    }
    else if (FallbackComponentType != null)
    {
        <DynamicComponent Parameters="@(Parameters)" Type="@FallbackComponentType" />
    }
}

@code 
{
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;
    [Inject] public IJSRuntime JsRuntime { get; set; } = default!;
    [Parameter] public Content? Content { get; set; }
    [Parameter] public Type? FallbackComponentType { get; set; }
    [Parameter] public Dictionary<string, object> Parameters { get; set; } = new();
    [Parameter] public string? Stylesheet { get; set; }
    
    private Dictionary<string, TView>? BlockViews { get; set; }
    private ElementReference _componentDiv;

    protected override void OnParametersSet()
    {
        if (!Parameters.ContainsKey("Content"))
        {
            Parameters.Add("Content", Content!);   
        }
        BlockViews = ExtensionManager.GetInstances<TView>(true);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrEmpty(Stylesheet))
        {
            await JsRuntime.InvokeVoidAsync("initializeShadowDOM", _componentDiv, Stylesheet);
        }
    }
}