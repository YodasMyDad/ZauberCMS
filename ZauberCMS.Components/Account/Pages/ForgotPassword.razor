@page "/Account/ForgotPassword"
@using Microsoft.Extensions.Options
@using ZauberCMS.Core.Membership
@using ZauberCMS.Core.Membership.Commands
@using ZauberCMS.Core.Membership.Interfaces
@using ZauberCMS.Core.Shared.Models
@using ZauberCMS.Core.Plugins
@using ZauberCMS.Core.Settings
@attribute [ExcludeFromInteractiveRouting]

<LayoutView Layout="LayoutType">
    <PageTitle>Forgot your password?</PageTitle>
    <div style="width: 100%; max-width: 700px;">
        <h3>Enter your email.</h3>

                <StatusMessage ResultMessages="@ResultMessages"/>
                <EditForm Model="ForgotPasswordCommand" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator/>
                    <ValidationSummary class="text-danger" role="alert"/>

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="ForgotPasswordCommand.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                        <label for="email" class="form-label">Email</label>
                        <ValidationMessage For="() => ForgotPasswordCommand.Email" class="text-danger"/>
                    </div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Reset password</button>
                </EditForm>
 
    </div>
</LayoutView>

@code {
    [Inject] public IOptions<ZauberSettings> Settings { get; set; } = default!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;
    [Inject] public IdentityRedirectManager RedirectManager { get; set; } = default!;

    [SupplyParameterFromForm] private ForgotPasswordCommand ForgotPasswordCommand { get; set; } = new();

    private List<ResultMessage> ResultMessages { get; set; } = [];
    private Type LayoutType { get; set; } = default!;

    protected override void OnParametersSet()
    {
        var allLayouts = ExtensionManager.GetInstances<IAccountLayout>();
        if (allLayouts.TryGetValue(Settings.Value.Identity.AccountLayout!, out var accountLayout))
        {
            LayoutType = accountLayout.GetType();
        }
    }

    private async Task OnValidSubmitAsync(EditContext editContext)
    {
        if (editContext.Validate())
        {
            var result = await Mediator.Send(ForgotPasswordCommand);
            ResultMessages = result.Messages;
        }
    }

}