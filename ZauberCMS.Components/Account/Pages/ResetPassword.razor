@page "/Account/ResetPassword"
@using System.Text
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Options
@using ZauberCMS.Core.Membership.Commands
@using ZauberCMS.Core.Membership.Interfaces
@using ZauberCMS.Core.Settings
@using ZauberCMS.Core.Plugins
@using ZauberCMS.Core.Shared.Models
@attribute [ExcludeFromInteractiveRouting]

<LayoutView Layout="LayoutType">
    <PageTitle>Reset password</PageTitle>
    <div style="width: 100%; max-width: 700px;">
        <h3>Reset your password.</h3>

                <StatusMessage ResultMessages="@ResultMessages"/>
                <EditForm Model="ResetPasswordCommand" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator/>
                    <ValidationSummary class="text-danger" role="alert"/>

                    <input type="hidden" name="Input.Code" value="@ResetPasswordCommand.Code"/>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="ResetPasswordCommand.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                        <label for="email" class="form-label">Email</label>
                        <ValidationMessage For="() => ResetPasswordCommand.Email" class="text-danger"/>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="ResetPasswordCommand.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your password."/>
                        <label for="password" class="form-label">Password</label>
                        <ValidationMessage For="() => ResetPasswordCommand.Password" class="text-danger"/>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="ResetPasswordCommand.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password."/>
                        <label for="confirm-password" class="form-label">Confirm password</label>
                        <ValidationMessage For="() => ResetPasswordCommand.ConfirmPassword" class="text-danger"/>
                    </div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Reset</button>
                </EditForm>
 
    </div>

</LayoutView>

@code {

    [Inject] public IOptions<ZauberSettings> Settings { get; set; } = null!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = null!;
    [SupplyParameterFromForm] private ResetPasswordCommand ResetPasswordCommand { get; set; } = new();

    [SupplyParameterFromQuery] private string? Code { get; set; }
    [SupplyParameterFromQuery] private string? Email { get; set; }
    private List<ResultMessage> ResultMessages { get; set; } = [];

    private Type LayoutType { get; set; } = null!;

    protected override void OnParametersSet()
    {
        var allLayouts = ExtensionManager.GetImplementations<IAccountLayout>(true);
        if (allLayouts.TryGetValue(Settings.Value.Identity.AccountLayout!, out var accountLayout))
        {
            LayoutType = accountLayout;
        }
    }

    protected override void OnInitialized()
    {
        if (Code == null)
        {
            ResultMessages.Add(new ResultMessage { Message = "A code must be supplied for password to be reset" });
        }
        else
        {
            ResetPasswordCommand.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            if (!Email.IsNullOrWhiteSpace())
            {
                ResetPasswordCommand.Email = Email;
            }
        }
    }

    private async Task OnValidSubmitAsync(EditContext editContext)
    {
        if (editContext.Validate())
        {
            var result = await Mediator.Send(ResetPasswordCommand);
            ResultMessages = result.Messages;
        }
    }

}