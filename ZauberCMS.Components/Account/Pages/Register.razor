@page "/Account/Register"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Options
@using ZauberCMS.Core.Membership
@using ZauberCMS.Core.Membership.Commands
@using ZauberCMS.Core.Membership.Interfaces
@using ZauberCMS.Core.Plugins
@using ZauberCMS.Core.Settings
@using ZauberCMS.Core.Shared.Models
<LayoutView Layout="LayoutType">
    <PageTitle>Register</PageTitle>

    <div style="width: 100%; max-width: 700px;">
        <StatusMessage ResultMessages="@ResultMessages"/>
        @if (AuthState?.User.Identity?.IsAuthenticated != true)
        {
            <EditForm Model="RegisterUserCommand" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" style="width: 100%;">
                <DataAnnotationsValidator/>
                <h3>Create a new account.</h3>
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="RegisterUserCommand.Username" class="form-control" aria-required="true" placeholder="Username"/>
                    <label for="username">Username</label>
                    <ValidationMessage For="() => RegisterUserCommand.Username" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="RegisterUserCommand.Email" type="email" class="form-control" aria-required="true" placeholder="name@example.com"/>
                    <label for="email">Email</label>
                    <ValidationMessage For="() => RegisterUserCommand.Email" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="RegisterUserCommand.Password" class="form-control" aria-required="true" placeholder="password"/>
                    <label for="password">Password</label>
                    <ValidationMessage For="() => RegisterUserCommand.Password" class="text-danger"/>
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
            </EditForm>
            <ExternalLoginPicker/>   
        }
    </div>
    
</LayoutView>

@code {
    [SupplyParameterFromForm] public RegisterUserCommand RegisterUserCommand { get; set; } = new();
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [Inject] public IdentityRedirectManager RedirectManager { get; set; } = default!;
    [Inject] public IOptions<ZauberSettings> Settings { get; set; } = default!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;
    [Inject] public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    private List<ResultMessage> ResultMessages { get; set; } = [];
    private Type LayoutType { get; set; } = default!;
    private AuthenticationState? AuthState { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var allLayouts = ExtensionManager.GetInstances<IAccountLayout>();
        if (allLayouts.TryGetValue(Settings.Value.Identity.AccountLayout!, out var accountLayout))
        {
            LayoutType = accountLayout.GetType();
        }
        AuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (AuthState?.User.Identity?.IsAuthenticated == true)
        {
            ResultMessages.Add(new ResultMessage{Message = "You are already logged in", MessageType = ResultMessageType.Warning});
        }
    }

    public async Task RegisterUser(EditContext editContext)
    {
        if (editContext.Validate())
        {
            RegisterUserCommand.AutoLogin = true;
            var result = await Mediator.Send(RegisterUserCommand);

            if (result.Success)
            {
                if (!result.NavigateToUrl.IsNullOrWhiteSpace())
                {
                    RedirectManager.RedirectTo(result.NavigateToUrl);
                }

                ResultMessages = result.Messages.SuccessMessages().ToList();
            }
            else
            {
                ResultMessages = result.Messages.ErrorMessages().ToList();
            }
        }
    }

}