@typeparam TItem

<div>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0.3rem" class="">
        <RadzenTextBox @bind-Value="_newItem" Placeholder="Add a value and click plus" Style="width: 100%"/>
        <RadzenButton Click="@AddItem" Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" class="rz-border-radius-10 rz-shadow-4"/>
    </RadzenStack>

    <div class="pt-3 grid gap-2 grid-cols-1">
        @for (var i = 0; i < Value.Count; i++)
        {
            var index = i; // Capture the index
            var item = Value[index]; // Get the current item

            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0.3rem" @key="item">
                <RadzenTextBox Value="@item" ValueChanged="@(value => OnValueChanged(value, index))" class="w-full" aria-label="Name TextBox"/>
                <RadzenButton Click="@(() => RemoveItem(item))" Icon="remove" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" class="rz-border-radius-10 rz-shadow-4"/>
            </RadzenStack>
        }
    </div>
</div>

@code {
    [Parameter] public List<string> Value { get; set; } = [];
    [Parameter] public EventCallback<List<string>> ValueChanged { get; set; }

    private string _newItem = string.Empty;

    private async Task AddItem()
    {
        if (!string.IsNullOrWhiteSpace(_newItem))
        {
            Value.Add(_newItem);
            _newItem = string.Empty;
            await ValueChanged.InvokeAsync(Value);
            StateHasChanged();
        }
    }

    private async Task RemoveItem(string item)
    {
        Value.Remove(item);
        await ValueChanged.InvokeAsync(Value);
        StateHasChanged();
    }

    private async Task OnValueChanged(string newValue, int index)
    {
        if (index >= 0 && index < Value.Count)
        {
            Value[index] = newValue;
            await ValueChanged.InvokeAsync(Value);
            StateHasChanged();
        }
    }

}