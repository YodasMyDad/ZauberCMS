@using System.Text.Json
@using AutoMapper
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Localization
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Content.Interfaces
@using ZauberCMS.Core.Shared
@using ZauberCMS.Core.Plugins
@using ZauberCMS.Components.Editors.Dialogs
@using ZauberCMS.Components.Editors.Models
@using ZauberCMS.Core.Shared.Services

@if (ContentType != null && Content != null)
{
    <EditForm @ref="@ContentForm" Model="@Content">

        <RadzenRow class="rz-pb-2">
            <RadzenTextBox Style="width: 100%;" Name="Name" Placeholder="Name" Value="@Content!.Name" ValueChanged="@((string name) => { Content.Name = name; })" aria-label="Name"/>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0.2rem">
                <RadzenIcon Icon="schedule" Style="line-height: 20px; height: 20px; font-size: 20px;" IconStyle="IconStyle.Light"/> <RadzenText TextStyle="TextStyle.Caption" Style="margin: 0; padding: 0;">Last Updated: @Content.DateUpdated.Humanize()</RadzenText>
                @if (Content.UnpublishedContent != null)
                {
                    <RadzenText TextStyle="TextStyle.Caption" Style="margin: 0; padding: 0; color: #e85d5d">(Contains Unpublished Changes)</RadzenText>
                }                
            </RadzenStack>
        </RadzenRow>

        <RadzenTabs @ref="Tabs" RenderMode="TabRenderMode.Client" Change="@(i => TabChange(i))">
            <Tabs>
                @foreach (var tab in ContentType.Tabs.Where(x => !x.IsSystemTab).OrderBy(x => x.SortOrder))
                {
                    <RadzenTabsItem>
                        <Template Context="tabContext">
                            @tab.Name
                        </Template>
                        <ChildContent>
                            <RadzenStack Gap="1rem">
                                @foreach (var property in ContentType.ContentProperties
                                              .Where(x => x.TabId == tab.Id)
                                              .OrderBy(x => x.SortOrder))
                                {
                                    if (property.Component != null)
                                    {
                                        AllContentTypeProperties.TryGetValue(property.Component, out var contentPropertyComponent);
                                        if (contentPropertyComponent != null)
                                        {
                                            AllContentValues.TryGetValue(property.Id, out var contentValue);
                                            if (contentValue != null)
                                            {
                                                <EditorRow FullWidth="@(property.FullWidth)">
                                                    <LeftColumn>
                                                        <PropertyInfo Name="@property.Name" Alias="@property.Alias" Description="@property.Description"/>
                                                    </LeftColumn>
                                                    <CentreColumn>
                                                        <DynamicContentProperty ComponentType="@contentPropertyComponent"
                                                                                Settings="@property.Settings"
                                                                                Content="@Content"
                                                                                Value="@contentValue.Value"
                                                                                ValueChanged="@(value => UpdateProperty(contentValue.ContentTypePropertyId, value))"/>
                                                    </CentreColumn>
                                                </EditorRow>
                                            }
                                        }
                                    }
                                }

                            </RadzenStack >
                        </ChildContent>
                    </RadzenTabsItem>
                }

                @if (IsBlockList != true)
                {
                    <RadzenTabsItem Text="System">
                        <EditorRow>
                            <LeftColumn>
                                <PropertyInfo Name="Id"/>
                            </LeftColumn>
                            <CentreColumn>
                                @Content.Id
                            </CentreColumn>
                        </EditorRow>

                        <EditorRow>
                            <LeftColumn>
                                <PropertyInfo Name="Content View" Description="The views available to render this content in the front end"/>
                            </LeftColumn>
                            <CentreColumn>
                                <RadzenDropDown @bind-Value="@Content.ViewComponent" Data="@ContentType.AvailableContentViews" Style="width: 100%; max-width: 400px;"/>
                            </CentreColumn>
                        </EditorRow>

                        <EditorRow>
                            <LeftColumn>
                                <PropertyInfo Name="Url" Description="The url in the browser bar to show this page"/>
                            </LeftColumn>
                            <CentreColumn>
                                <RadzenTextBox Style="width: 100%;" Name="Url" @bind-Value="@Content.Url"/>
                            </CentreColumn>
                        </EditorRow>

                        <EditorRow>
                            <LeftColumn>
                                <PropertyInfo Name="Hide From Navigation" Description="Optional: Hides this page from any navigation if the developer has integrated it"/>
                            </LeftColumn>
                            <CentreColumn>
                                <RadzenSwitch Name="HideFromNavigation" @bind-Value="@Content.HideFromNavigation"/>
                            </CentreColumn>
                        </EditorRow>

                        <EditorRow>
                            <LeftColumn>
                                <PropertyInfo Name="Internal Redirect" Description="Choose a different page to show when the user browses to this pages url"/>
                            </LeftColumn>
                            <CentreColumn>
                                <ContentPickerProperty
                                    Value="@Content.InternalRedirectIdAsString"
                                    Settings="@(JsonSerializer.Serialize(new ContentPickerSettings { MaxAllowed = 1 }))"
                                    ValueChanged="@(e => Content.InternalRedirectIdAsString = e.ToString())"/>
                            </CentreColumn>
                        </EditorRow>
                        
                    </RadzenTabsItem>
                }
            </Tabs>
        </RadzenTabs>
        @if (!Content.Deleted)
        {
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center">
                @if (Content!.UnpublishedContentId != null)
                {
                    <RadzenButton Click=@(args => ClearUnpublishedChanges()) Shade="Shade.Lighter" Text="Clear Changes"/>
                }
                @if (Content!.Published)
                {
                    <RadzenButton Click=@(args => Save(null, true)) Text="Unpublish"/>
                }
                @if (IsBlockList == true)
                {
                    <RadzenButton Click=@(() => Save(null, false)) Icon="save" ButtonStyle="ButtonStyle.Success" Text="Save" />
                }
                else
                {
                    <RadzenSplitButton Click=@(args => Save(args, false)) Icon="save" ButtonStyle="ButtonStyle.Success" Text="Save &amp; Publish">
                        <ChildContent>
                            <RadzenSplitButtonItem Text="Save Only" Value="1"/>
                        </ChildContent>
                    </RadzenSplitButton>   
                }
            </RadzenStack>    
        }
    </EditForm>
}
else
{
    <ListContentTypes ContentTypeSelected="@UpdateContentTypeId"
                      RootOnly="@RootOnly"
                      ElementTypesOnly="@ElementTypesOnly"
                      ParentId="@ParentId"/>
}

@code {

    [CascadingParameter] BlazoredModalInstance ContentEditorModal { get; set; } = null!;
    [CascadingParameter] IModalService ModalService { get; set; } = null!;
    [Inject] public NotificationService NotificationService { get; set; } = null!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = null!;
    [Inject] public AppState AppState { get; set; } = null!;
    [Inject] public TreeState TreeState { get; set; } = null!;
    [Inject] public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;
    [Inject] public ValidateService<Content> ValidateService { get; set; } = null!;
    [Inject] public IMapper Mapper { get; set; } = null!;
    [Inject] public IStringLocalizer<SharedResource> Localizer { get; set; } = null!;

    [Parameter] public Guid? ContentId { get; set; }
    [Parameter] public Guid? ParentId { get; set; }
    [Parameter] public bool? IsBlockList { get; set; }
    [Parameter] public Content? Content { get; set; }
    [Parameter] public string? DefaultName { get; set; }

    private EditForm ContentForm { get; set; } = null!;
    private ContentType? ContentType { get; set; }
    private Dictionary<string, Type> AllContentTypeProperties { get; set; } = new();
    private Dictionary<Guid, ContentPropertyValue> AllContentValues { get; set; } = new();
    //private Dictionary<string, string> AvailableContentViews { get; set; } = new();
    private int SelectedTabIndex { get; set; }
    private RadzenTabs? Tabs { get; set; }
    private bool RootOnly => IsBlockList != true && ContentId == null && ParentId == null;
    private bool ElementTypesOnly => IsBlockList == true;
    private AuthenticationState AuthState { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        AllContentTypeProperties = ExtensionManager.GetImplementations<IContentProperty>(true);
        AuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (Content == null)
        {
            // If no content is passed in
            if (ContentId != null)
            {
                await RefreshContent();
            }
            else if (ParentId != null)
            {
                Content = new Content
                {
                    ParentId = ParentId,
                    IsRootContent = false
                };
            }
            else
            {
                Content = new Content
                {
                    IsRootContent = IsBlockList != true
                };
            }

            if (IsBlockList == true && 
                Content?.Name.IsNullOrWhiteSpace() == true && 
                DefaultName.IsNullOrWhiteSpace() == false)
            {
                Content.Name = DefaultName;
            }
        }
        else
        {
            // We have a content item passed in
            ContentType = await Mediator.Send(new GetContentTypeCommand { Id = Content.ContentTypeId });
            SyncProperties(Content, ContentType);
        }
    }

    private async Task RefreshContent()
    {
        if (ContentId != null)
        {
            Content = await Mediator.Send(new GetContentCommand { Id = ContentId!.Value, IncludeUnpublished = true, IncludeUnpublishedContent = true});
            ContentType = await Mediator.Send(new GetContentTypeCommand { Id = Content!.ContentTypeId });

            if (Content.UnpublishedContent != null)
            {
                // Replace the Content with the Json one
                Mapper.Map(Content.UnpublishedContent.JsonContent, Content);
                Content.PropertyData = Content.UnpublishedContent.JsonContent.PropertyData;
            }
                
            SyncProperties(Content, ContentType);   
        }
    }
    
    private void TabChange(int i)
    {
        SelectedTabIndex = i;
    }

    private Task UpdateProperty(Guid ctpId, string value)
    {
        var property = Content?.PropertyData.FirstOrDefault(p => p.ContentTypePropertyId == ctpId);
        if (property != null)
        {
            property.Value = value;
            property.DateUpdated = DateTime.UtcNow;
        }
        
        return Task.CompletedTask;
    }

    private void SyncProperties(Content content, ContentType contentType)
    {
        var toRemove = new List<ContentPropertyValue>();
        // Check for properties that were removed
        foreach (var cpd in content.PropertyData)
        {
            var existsInContentType = contentType.ContentProperties.Any(x => x.Id == cpd.ContentTypePropertyId);
            if (!existsInContentType)
            {
                // Mark for removal
                toRemove.Add(cpd);
            }
        }

        // Remove the properties
        foreach (var tr in toRemove)
        {
            content.PropertyData.Remove(tr);
        }

        // Check for properties to add
        foreach (var ctp in contentType.ContentProperties)
        {
            var exists = content.PropertyData.FirstOrDefault(x => x.ContentTypePropertyId == ctp.Id);
            if (exists == null)
            {
                // Add it
                content.PropertyData.Add(new ContentPropertyValue
                {
                    ContentTypePropertyId = ctp.Id,
                    Alias = ctp.Alias!,
                    ContentId = Content!.Id
                });
            }
        }

        AllContentValues = Content!.PropertyData.ToDictionary(x => x.ContentTypePropertyId, x => x);
        //AvailableContentViews = contentType.AvailableContentViews.ToDictionary(x => x.GetLastPart(), x => x);

        if (Content.ViewComponent.IsNullOrWhiteSpace() && contentType.AvailableContentViews.Any())
        {
            Content.ViewComponent = contentType.AvailableContentViews.FirstOrDefault()!;
        }
    }

    private async Task UpdateContentTypeId(Guid contentTypeId)
    {
        ContentType = await Mediator.Send(new GetContentTypeCommand { Id = contentTypeId });

        // Need to set the ContentType is this is new content
        if (ContentId == null)
        {
            Content!.ContentTypeId = ContentType.Id;
        }

        SyncProperties(Content!, ContentType);
    }

    private async Task ClearUnpublishedChanges()
    {
        var removeUnpublishedContent = await Mediator.Send(new ClearUnpublishedContentCommand { ContentId = Content!.Id });
        if (removeUnpublishedContent.Success)
        {
            await RefreshContent();
            await AppState.NotifyContentSaved(Content, AuthState.User.GetUserName()!);
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"{Content!.Name} Error", Detail = removeUnpublishedContent.Messages.MessagesAsString(), Duration = 4000 });
        }
    }
    
    private async Task Save(RadzenSplitButtonItem? item, bool unpublish)
    {
        if (await ValidateService.CanSave(Content!))
        {
            if (IsBlockList == true)
            {
                await ContentEditorModal.CloseAsync(ModalResult.Ok(Content));
            }
            else
            {
                var saveContentCommand = new SaveContentCommand();
                
                if (unpublish)
                {
                    Content!.Published = false;
                }
                else
                {
                    if (item == null)
                    {
                        Content!.Published = true;
                    }
                    else if (ContentId != null && Content!.Published)
                    {
                        // Content exists and is already published, so need to save the unpublished changes only
                        saveContentCommand.SaveUnpublishedOnly = true;
                    }
                }

                saveContentCommand.Content = Content;
                var result = await Mediator.Send(saveContentCommand);
                NotificationService.Notify(result.Success ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"{Content!.Name} Saved", Detail = "", Duration = 4000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"{Content!.Name} Error", Detail = result.Messages.MessagesAsString(), Duration = 4000 });
                
                if (ParentId != null)
                {
                    // If we are creating or saving a child item, make sure the parent is open
                    if (!TreeState.IsNodeExpanded(ParentId.Value))
                    {
                        TreeState.ClearChildCache(ParentId.Value);
                        TreeState.NodeExpanded(ParentId.Value);
                    }
                }
                
                await AppState.NotifyContentSaved(Content, AuthState.User.GetUserName()!);
                NavigationManager.NavigateTo($"{Urls.AdminUpdateContent}/{Content.Id}");
            }
        }
    }

}