@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Shared
@using Content = ZauberCMS.Core.Content.Models.Content
@using ZauberCMS.Components.Admin.Trees
@implements ZauberCMS.Core.Sections.Interfaces.ISectionNav

<ContentTree @ref="ContentTree"
            Data="@ContentItems"
            OnChange="OnChange" 
            @bind-Value="@Selection" />

@code {
    public int SortOrder => 0;
    public string SectionNavGroupAlias => Constants.Sections.SectionNavGroups.ContentNavGroup;
    
    [CascadingParameter] public IModalService ModalService { get; set; } = null!;
    
    [Inject] public AppState AppState { get; set; } = null!;
    [Inject] public TreeState TreeState { get; set; } = null!;
    
    private List<Content> ContentItems { get; set; } = [];
    private object? Selection { get; set; }
    private ContentTree? ContentTree { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        AppState.OnContentChanged += HandleContentTreeChanged;
        TreeState.OnTreeValueChanged += TreeStateOnOnTreeValueChanged;
        await DataRefresh();
    }

    public void Dispose()
    {
        AppState.OnContentChanged -= HandleContentTreeChanged;
        TreeState.OnTreeValueChanged -= TreeStateOnOnTreeValueChanged;
    }

    private async Task HandleContentTreeChanged(Content? content, string user)
    {
        await DataRefresh();
        StateHasChanged();
    }

    /// <summary>
    /// Remove the selected state
    /// </summary>
    /// <param name="obj"></param>
    private void TreeStateOnOnTreeValueChanged(object obj)
    {
        if (obj != Selection)
        {
            Selection = null;
            StateHasChanged();
        }
    }
    
    private async Task DataRefresh()
    {
        var items = await Mediator.Send(new QueryContentCommand
        {
            AmountPerPage = 1000,
            WhereClause = x => x.IsRootContent,
            IncludeUnpublished = true,
            IncludeChildren = true,
            OrderBy = GetContentsOrderBy.SortOrder
        });
        ContentItems = items.Items.ToList();
    }

    private void OnChange()
    {
        TreeState.TreeValue = Selection;
        if (Selection is Content content)
        {
            NavigationManager.NavigateTo($"{Urls.AdminUpdateContent}/{content.Id}");
            StateHasChanged();
        }
    }

}