@using ZauberCMS.Components.Admin.ContentSection.Dialogs
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Shared
@using Content = ZauberCMS.Core.Content.Models.Content
@using ZauberCMS.Core.Shared.Services
@using ZauberCMS.Core.Membership.Models
@using ZauberCMS.Components.Admin.Trees
@implements ZauberCMS.Core.Sections.Interfaces.ISectionNav

<ContentTree @ref="ContentTree"
            Data="@ContentItems"
            OnChange="OnChange" 
            @bind-Value="@Selection" 
            OnItemContextMenu="ItemContextMenu"/>

@code {
    public int SortOrder => 0;
    public string SectionNavGroupAlias => Constants.Sections.SectionNavGroups.ContentNavGroup;
    
    [CascadingParameter] public IModalService ModalService { get; set; } = null!;
    
    [Inject] public IServiceProvider ServiceProvider { get; set; } = null!;
    [Inject] public ContextMenuService ContextMenuService { get; set; } = null!;
    [Inject] public NotificationService NotificationService { get; set; } = null!;
    [Inject] public DialogService ConfirmService { get; set; } = null!;
    [Inject] public IModalService DialogService { get; set; } = null!;
    [Inject] public AppState AppState { get; set; } = null!;
    [Inject] public TreeState TreeState { get; set; } = null!;
    [Inject] public ICacheService CacheService { get; set; } = null!;
    
    private List<Content> ContentItems { get; set; } = [];
    private object? Selection { get; set; }
    private ContentTree? ContentTree { get; set; }
    private User? CurrentUser { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await Mediator.GetCurrentUser();
        AppState.OnContentChanged += HandleContentTreeChanged;
        TreeState.OnTreeValueChanged += TreeStateOnOnTreeValueChanged;
        await DataRefresh();
    }

    public void Dispose()
    {
        AppState.OnContentChanged -= HandleContentTreeChanged;
        TreeState.OnTreeValueChanged -= TreeStateOnOnTreeValueChanged;
    }

    private async Task HandleContentTreeChanged(Content? content, string user)
    {
        await DataRefresh();
        StateHasChanged();
    }

    /// <summary>
    /// Remove the selected state
    /// </summary>
    /// <param name="obj"></param>
    private void TreeStateOnOnTreeValueChanged(object obj)
    {
        if (obj != Selection)
        {
            Selection = null;
            StateHasChanged();
        }
    }
    
    private async Task DataRefresh()
    {
        var items = await Mediator.Send(new QueryContentCommand
        {
            AmountPerPage = 1000,
            WhereClause = x => x.IsRootContent,
            IncludeUnpublished = true,
            IncludeChildren = true,
            OrderBy = GetContentsOrderBy.SortOrder
        });
        ContentItems = items.Items.ToList();
    }
    
    private static List<ContextMenuItem> MenuItems(TreeItemContextMenuEventArgs args)
    {
        var globalMenuItems = new List<ContextMenuItem>
        {
            new() { Text = "Create", Value = 1 },
            new() { Text = "Delete", Value = 2 },
            new() { Text = "Sort", Value = 3 }
        };
        
        var items = new List<ContextMenuItem>();
        
        if (args.Value is Content content)
        {
            items.AddRange(globalMenuItems);

            var domainCultureMenuText = content.IsRootContent ? "Culture & Domains" : "Culture";
            items.Add(new ContextMenuItem { Text = domainCultureMenuText, Value = 4 });

            if (content.IsRootContent)
            {
                items.Add(new ContextMenuItem { Text = "Refresh", Value = 5});
            }
        }
        
        return items;
    }

    private void ItemContextMenu(TreeItemContextMenuEventArgs args)
    {
        ContextMenuService.Open(args,
            MenuItems(args), async e =>
            {
                var content = (Content)args.Value;
                var dbContent = await Mediator.Send(new GetContentCommand { Id = content.Id, IncludeChildren = true });
                //var text = args.Text;
                switch(e.Value)
                {
                    case 1:
                        // Handle Create
                        ContextMenuService.Close();
                        NavigationManager.NavigateTo($"/admin/createcontent/{content.Id}");
                        break;
                    case 2:
                        // Confirm dialogue, say if there are children, and confirm then delete all
                            var hasChildren = dbContent!.Children.Any();
                            var message = hasChildren
                                ? "Move this content and it's children to the recycle bin?"
                                : "Move this content to the recycle bin?";
                            var delete = await ConfirmService.Confirm(message, "Move to recycle bin", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
                            if (delete == true)
                            {
                                var result = await Mediator.Send(new DeleteContentCommand{ContentId = dbContent.Id, MoveToRecycleBin = true});
                                NotificationService.Notify(new NotificationMessage { 
                                    Severity = result.Success ? NotificationSeverity.Success : NotificationSeverity.Error, 
                                    Summary = result.Success ? "Success" : "Error", 
                                    Detail = result.Messages.MessagesAsString(), Duration = 4000 });
                                if (result.Success)
                                {
                                    await AppState.NotifyContentChanged(dbContent, CurrentUser?.Name ?? "Unknown");
                                }
                            }
            
                        break;
                    case 3:
                            if (!dbContent!.Children.Any())
                            {
                                // Show message if no children
                                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Hmmmm", Detail = "Sorry, nothing to sort as this content has no children", Duration = 4000 });
                            }
                            else
                            {
                                ContextMenuService.Close();
                                var dialog = ModalService.OpenSidePanel<SortContent>("Sort Children", 
                                    new Dictionary<string, object>{ { "ContentId", dbContent.Id }, {"Content", dbContent.Children.OrderBy(x => x.SortOrder).ToList()} });
                                var result = await dialog.Result;
                                if (result is { Confirmed: true, Data: List<Content> sortedContent })
                                {
                                    foreach (var c in sortedContent)
                                    {
                                        var saveResult = await Mediator.Send(new SaveContentCommand {Content = c, ExcludePropertyData = true});
                                        if (!saveResult.Success)
                                        {
                                            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = saveResult.Messages.MessagesAsString(), Duration = 4000 });
                                        }
                                    }
                                    await AppState.NotifyContentChanged(dbContent, CurrentUser?.Name ?? "Unknown");
                                }
                            }
         
                        break;
                    case 4:
                        ContextMenuService.Close();
                        var languageDialog = DialogService.OpenSidePanel<CultureDomains>("Domains & Culture", 
                            new Dictionary<string, object>
                            {
                                {"Content", content}
                            });
                        var languageDialogResult = await languageDialog.Result;
                        if (languageDialogResult is { Confirmed: true })
                        {
                            // Do we need to do anything here?     
                            var savedContent = languageDialogResult.Data as Content;
                            if (savedContent?.LanguageId != null)
                            {
                                // Save the content
                                var saveResult = await Mediator.Send(new SaveContentCommand {Content = savedContent, ExcludePropertyData = true});
                                if (!saveResult.Success)
                                {
                                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = saveResult.Messages.MessagesAsString(), Duration = 4000 });
                                }
                                else
                                {
                                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Culture Updated", Detail = string.Empty, Duration = 4000 });
                                    await AppState.NotifyContentChanged(dbContent, CurrentUser?.Name ?? "Unknown");
                                }
                            }
                        }    
         
                        break;
                    case 5:
                        ContextMenuService.Close();
                        CacheService.ClearCachedItemsWithPrefix(nameof(Content));
                        TreeState.ClearChildCache(null);
                        await DataRefresh();
                        break;
                }
            }
        );
    }

    private void OnChange()
    {
        TreeState.TreeValue = Selection;
        if (Selection is Content content)
        {
            NavigationManager.NavigateTo($"/admin/updatecontent/{content.Id}");
            StateHasChanged();
        }
    }

}