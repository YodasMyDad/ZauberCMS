@using ZauberCMS.Components.Admin.Trees
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Membership.Models
@using ZauberCMS.Core.Shared
@using ZauberCMS.Core.Shared.Models
@implements ZauberCMS.Core.Sections.Interfaces.ISectionNav

<div>
    <BaseTree
        TreeAlias="@Constants.Sections.Trees.RecycleBinTree"
        T="TreeStub"
        Data="@TreeItems"
        Expand="@OnExpandHandler"
        Change="@OnChangeHandler"
        @bind-Value="@Selection"
        HasChildren="@(e => HasChildren(e))"
        ShouldBeExpanded="@(e => ShouldBeExpanded(e))"
        Template="@(TreeExtensions.CreateStandardTreeTemplate<object>())">
    </BaseTree>
</div>

@code {
    [Inject] public AppState AppState { get; set; } = null!;
    [Inject] public TreeState TreeState { get; set; } = null!;

    public int SortOrder => 100;
    public string SectionNavGroupAlias => Constants.Sections.SectionNavGroups.ContentNavGroup;

    private object? Selection { get; set; }
    private IEnumerable<TreeStub> TreeItems { get; set; } = [];
    private User? CurrentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await Mediator.GetCurrentUser();
        await DataRefresh();
        TreeState.OnTreeValueChanged += TreeStateOnOnTreeValueChanged;
        AppState.OnContentChanged += HandleContentChanged;
    }
    
    /// <summary>
    /// Remove the selected state
    /// </summary>
    /// <param name="obj"></param>
    private void TreeStateOnOnTreeValueChanged(object obj)
    {
        if (obj != Selection)
        {
            Selection = null;
            StateHasChanged();
        }
    }
    
    private async Task DataRefresh()
    {
        var deletedContent = await Mediator.Send(new QueryContentCommand
        {
            OrderBy = GetContentsOrderBy.DateUpdated,
            IsDeleted = true, // Only get deleted items
            IncludeUnpublished = true,
            AmountPerPage = 300 // Need to think about this
        });

        var tree = new List<TreeStub>();
        var usersTree = new TreeStub
        {
            Id = Constants.Guids.RecycleBinRootId,
            Name = "Recycle Bin",
            Icon = "delete",
            SortOrder = 1,
            StubType = typeof(TreeStub)
        };
        
        foreach (var content in deletedContent.Items)
        {
            usersTree.Branches.Add(new TreeBranch
            {
                Icon = content.ContentType?.Icon,
                Id = content.Id,
                Name = content.Name,
                Url = $"{Urls.AdminUpdateContent}/{content.Id}",
                BranchType = typeof(Content)
            });
        }

        tree.Add(usersTree);
        TreeItems = tree;
    }


    private async Task HandleContentChanged(Content? media, string username)
    {
        TreeState.ClearChildCache(null);
        await DataRefresh();
        StateHasChanged();
    }

    private void OnExpandHandler(TreeExpandEventArgs args)
    {
        switch (args.Value)
        {
            case TreeStub treeStub:
                args.Children.Data = treeStub.Branches;
                args.Children.TextProperty = "Name";
                args.Children.Template = TreeExtensions.CreateStandardTreeTemplate<RadzenTreeItem>();
                args.Children.HasChildren = HasChildren;
                TreeState.NodeExpanded(treeStub.Id);
                break;
            case TreeBranch branch:
                args.Children.Data = branch.Branches;
                args.Children.TextProperty = "Name";
                args.Children.Template = TreeExtensions.CreateStandardTreeTemplate<RadzenTreeItem>();
                args.Children.HasChildren = HasChildren;
                TreeState.NodeExpanded(branch.Id);
                break;
        }
    }

    private void OnChangeHandler()
    {
        TreeState.TreeValue = Selection;
        switch (Selection)
        {
            case TreeBranch treeStub:
            {
                if (!treeStub.Url.IsNullOrWhiteSpace())
                {
                    NavigationManager.NavigateTo(treeStub.Url);
                    StateHasChanged();
                }

                break;
            }
        }
    }

    private bool HasChildren(object data)
    {
        return data switch
        {
            TreeStub tree => tree.Branches.Any(),
            TreeBranch branch => branch.Branches.Any(),
            _ => false
        };
    }

    private bool ShouldBeExpanded(object data)
    {
        return data switch
        {
            TreeStub tree => TreeState.IsNodeExpanded(tree.Id) || tree.Branches.Any(),
            TreeBranch branch => TreeState.IsNodeExpanded(branch.Id),
            _ => false
        };
    }


    public void Dispose()
    {
        AppState.OnContentChanged -= HandleContentChanged;
        TreeState.OnTreeValueChanged -= TreeStateOnOnTreeValueChanged;
    }

}