@using System.Globalization
@using Microsoft.AspNetCore.Http
@using ZauberCMS.Core.Settings
@using ZauberCMS.Core.Plugins
@using ZauberCMS.Core.Content.Interfaces
@using Microsoft.Extensions.Options
@inherits LayoutComponentBase

<HeadContent>
    <SectionOutlet SectionId="@Sections.PageHeadContent"/>
</HeadContent>

<RadzenLayout>
    <CascadingValue Value="@this">
        <RadzenHeader class="rz-background-color-primary-darker flex justify-between items-center">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="5"
                         Style="height: 100%;">
                <RadzenSidebarToggle Click="@(() => ToggleSideBar())"/>
                @*<RadzenIcon Icon="automation"/>*@
                <ZauberCMS.Components.Shared.ZauberLogo Styles="height: 24px; colour: #fff; fill: #fff;" />
                <SectionLinks CurrentSection="@(SectionAlias)"/>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="5"
                         Style="height: 100%;">
                <UserProfile/>
            </RadzenStack>
        </RadzenHeader>
        @if (!SectionAlias.IsNullOrWhiteSpace())
        {
            <RadzenSidebar @bind-Expanded="@Expanded">
                <SectionTrees SectionAlias="@(SectionAlias)"/>
            </RadzenSidebar>
        }
        <RadzenBody>
            @Body
        </RadzenBody>
    </CascadingValue>
</RadzenLayout>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    [Inject] public IOptions<ZauberSettings> ZauberSettings { get; set; } = default!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;
    [CascadingParameter] public HttpContext? HttpContext { get; set; }
    [Inject] public IOptions<ZauberSettings> Settings { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        var globalSettingsRequest = await Mediator.GetGlobalSettings();
        if (globalSettingsRequest.AllowedAdminIpAddress.Any() && HttpContext != null)
        {
            // Someone has set an ip address, so check this persons IP
            var usersIp = HttpContext.Connection.RemoteIpAddress?.ToString();
            if (!usersIp.IsNullOrWhiteSpace())
            {
                if (!globalSettingsRequest.AllowedAdminIpAddress.Contains(usersIp))
                {
                    // Log them out and redirect
                    NavigationManager.NavigateTo("/api/auth/logout", true);
                }
            }
        }
    }

    protected override void OnInitialized()
    {
        var cultureInfo = new CultureInfo(Settings.Value.AdminDefaultLanguage);
        CultureInfo.CurrentCulture = cultureInfo;
        CultureInfo.CurrentUICulture = cultureInfo;
        CultureInfo.DefaultThreadCurrentCulture = cultureInfo;
        CultureInfo.DefaultThreadCurrentUICulture = cultureInfo;
    }
    
    private string? SectionAlias { get; set; }

    public void SetSection(string value)
    {
        SectionAlias = value;
        StateHasChanged();
    }

    private bool Expanded { get; set; } = true;

    private void ToggleSideBar()
    {
        Expanded = !Expanded;
    }

    internal static class Sections
    {
        internal static SectionOutlet? PageHeadContent = new();
    }

}