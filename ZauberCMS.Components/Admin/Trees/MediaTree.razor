@using System.Collections.Concurrent
@using ZauberCMS.Core.Media.Commands
@using ZauberCMS.Core.Shared
@using ZauberCMS.Core.Media.Models
@implements IDisposable

<BaseTree T="Media"
          Data="@Data"
          TreeAlias="@Constants.Sections.Trees.MediaTree"
          Expand="@OnExpandHandler"
          Change="@OnChangeHandler"
          @bind-Value="@Value"
          HasChildren="@(e => HasChildren(e))"
          ShouldBeExpanded="@(e => ShouldBeExpanded(e))"
          DisableContextMenu="DisableContextMenu"
          DisableSectionOnlyContextMenu="DisableSectionOnlyContextMenu"
          Template="@(CreateTreeTemplate<object>())">
</BaseTree>

@code {
    [Inject] public AppState AppState { get; set; } = null!;
    [Inject] public TreeState TreeState { get; set; } = null!;
    [Inject] public ContextMenuService ContextMenuService { get; set; } = null!;
    [Inject] public NotificationService NotificationService { get; set; } = null!;

    [Parameter] public IEnumerable<Media> Data { get; set; } = [];
    [Parameter] public EventCallback<TreeExpandEventArgs> OnExpand { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public EventCallback<TreeItemContextMenuEventArgs> OnItemContextMenu { get; set; }
    [Parameter] public object? Value { get; set; }
    [Parameter] public EventCallback<object> ValueChanged { get; set; }
    [Parameter] public bool DisableContextMenu { get; set; }
    [Parameter] public bool DisableSectionOnlyContextMenu { get; set; }
    [CascadingParameter] public IModalService? ModalService { get; set; }

    // Dictionary to cache HasChildren results
    private ConcurrentDictionary<Guid, bool>? _hasChildrenCache;

    protected override void OnInitialized()
    {
        AppState.OnMediaChanged += HandleMediaChanged;
        // Initialize the cache
        _hasChildrenCache = new ConcurrentDictionary<Guid, bool>();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!Data.Any())
        {
            await DataRefresh();
        }
    }

    private async Task HandleMediaChanged(Media? media, string username)
    {
        _hasChildrenCache?.Clear();

        // If on change hasn't got a delegate,
        // it's likely this is being used as a standalone tree
        // so need to handle data refresh (This needs thinking about a bit more)
        if (!OnChange.HasDelegate)
        {
            await DataRefresh();
            StateHasChanged();
        }
    }

    private async Task DataRefresh()
    {
        var items = await Mediator.Send(new QueryMediaCommand
        {
            AmountPerPage = 100,
            WhereClause = x => x.ParentId == null,
            IncludeChildren = true,
            OrderBy = GetMediaOrderBy.Name
        });
        Data = items.Items;
    }

    private async Task OnExpandHandler(TreeExpandEventArgs args)
    {
        if (OnExpand.HasDelegate)
        {
            await OnExpand.InvokeAsync(args);
        }
        else
        {
            if (args.Value is Media media)
            {
                var items = Mediator.Send(new QueryMediaCommand
                {
                    WhereClause = x => x.ParentId == media.Id,
                    OrderBy = GetMediaOrderBy.Name
                }).GetAwaiter().GetResult();
                args.Children.Data = items.Items;
                args.Children.TextProperty = "Name";
                args.Children.Template = CreateTreeTemplate<RadzenTreeItem>();
                args.Children.HasChildren = HasChildren;
                TreeState.NodeExpanded(media.Id);
            }
        }
    }


    private RenderFragment<T> CreateTreeTemplate<T>() where T : class
    {
        return context => builder =>
        {
            var treeItem = context as RadzenTreeItem;
            if (treeItem?.Value is Media media)
            {
                if (media.MediaType == MediaType.Image)
                {
                    builder.OpenComponent<RadzenImage>(0);
                    builder.AddAttribute(1, "Path", $"{media.Url}??width=25&height=25&rmode=max");
                    builder.AddAttribute(2, "style", "width: 25px; height: 25px; margin-right:4px;");
                    builder.AddAttribute(2, "class", "rounded");
                    builder.AddAttribute(2, "AlternateText", media.Name);
                    builder.CloseComponent();
                }
                else
                {
                    builder.OpenComponent<RadzenIcon>(0);
                    builder.AddAttribute(1, "Icon", media.MediaType.GetIcon());
                    builder.AddAttribute(2, "style", "font-weight: 300; color: dimgray;");
                    builder.CloseComponent();
                }

                builder.AddContent(3, media.Name);
            }
        };
    }

    private async Task OnChangeHandler()
    {
        await ValueChanged.InvokeAsync(Value);
        if (OnChange.HasDelegate)
        {
            await OnChange.InvokeAsync();
        }
    }

    private bool HasChildren(object data)
    {
        if (data is Media { MediaType: MediaType.Folder } media)
        {
            // Check if result is cached
            if (_hasChildrenCache!.TryGetValue(media.Id, out var hasChildren))
            {
                return hasChildren;
            }

            // Calculate result and cache it
            hasChildren = Task.Run(() => Mediator.Send(new HasChildMediaCommand { ParentId = media.Id })).GetAwaiter().GetResult();
            _hasChildrenCache[media.Id] = hasChildren;

            return hasChildren;
        }

        return false;
    }

    private bool ShouldBeExpanded(object data)
    {
        if (data is Media { MediaType: MediaType.Folder } media)
        {
            return TreeState.IsNodeExpanded(media.Id);
        }
        return false;
    }

    public void Dispose()
    {
        AppState.OnMediaChanged -= HandleMediaChanged;
    }

}