@using ZauberCMS.Components.Trees.ContextMenus
@using ZauberCMS.Core.Plugins
@using ZauberCMS.Core.Shared.Interfaces
@using ZauberCMS.Core.Shared
@typeparam T

<RadzenTree @ref="Tree" 
            Data="@Data" 
            Expand="@OnExpandHandler" 
            Change="@OnChangeHandler"
            Collapse="@OnCollapseHandler"
            @bind-Value="@Value" 
            ItemContextMenu="@OnItemContextMenuHandler">
    <RadzenTreeLevel Expanded="@ShouldBeExpanded" 
                     HasChildren="@(e => HasChildren(e))"
                     TextProperty="Name">
        <Template>
            @if (Template != null)
            {
                @Template(context)   
            }
        </Template>
    </RadzenTreeLevel>
</RadzenTree>
@*<p>@TreeState.CurrentSection</p>*@

@code {
    [CascadingParameter] public IModalService ModalService { get; set; } = null!;
    
    [Parameter] public IEnumerable<T> Data { get; set; } = [];
    [Parameter] public string TreeAlias { get; set; } = "BaseTree";
    [Parameter] public EventCallback<TreeExpandEventArgs> Expand { get; set; }
    [Parameter] public EventCallback<TreeEventArgs> Collapse { get; set; }
    [Parameter] public EventCallback Change { get; set; }
    [Parameter] public object? Value { get; set; }
    [Parameter] public EventCallback<object> ValueChanged { get; set; }
    [Parameter] public Func<object, bool> HasChildren { get; set; } = null!;
    [Parameter] public Func<object, bool> ShouldBeExpanded { get; set; } = null!;
    [Parameter] public RenderFragment<object>? Template { get; set; }

    [Inject] public TreeState TreeState { get; set; } = null!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = null!;
    [Inject] public ContextMenuService ContextMenuService { get; set; } = null!;
    
    private RadzenTree Tree { get; set; } = null!;

    private async Task OnExpandHandler(TreeExpandEventArgs args)
    {
        if (Expand.HasDelegate)
        {
            await Expand.InvokeAsync(args);
        }
        else
        {
            if (args.Value is ITreeItem treeItem)
            {
                TreeState.NodeExpanded(treeItem.Id);
            }
        }
    }
    
    private async Task OnCollapseHandler(TreeEventArgs args)
    {
        if (Collapse.HasDelegate)
        {
            await Collapse.InvokeAsync(args);
        }
        else
        {
            if (args.Value is ITreeItem treeItem)
            {
                TreeState.NodeCollapsed(treeItem.Id);
            }
        }
    }

    private async Task OnChangeHandler()
    {
        await ValueChanged.InvokeAsync(Value);
        if (Change.HasDelegate)
        {
            await Change.InvokeAsync();
        }
    }

    private void OnItemContextMenuHandler(TreeItemContextMenuEventArgs args)
    {
        var menuItems = ExtensionManager.GetInstances<ITreeContextMenu>(true);
        foreach (var treeContextMenu in menuItems
                     .Where(x => x.Value.Sections.Contains(TreeState.CurrentSection ?? ""))
                     .OrderBy(x => x.Value.SortOrder))
        {
            ContextMenuService.Open(args,
                treeContextMenu.Value.ContentMenuItems(args), async void (e) => await treeContextMenu.Value.ContextMenuEvents(args, e, NavigationManager, ContextMenuService, ModalService));
        }
        /*if (ItemContextMenu.HasDelegate)
        {
            await ItemContextMenu.InvokeAsync(args);
        }*/
    }
}
