@using ZauberCMS.Components.Trees.ContextMenus
@using ZauberCMS.Core.Plugins
@using ZauberCMS.Core.Shared.Interfaces
@using ZauberCMS.Core.Shared
@typeparam T

<RadzenTree @ref="Tree" 
            Data="@Data" 
            Expand="@OnExpandHandler" 
            Change="@OnChangeHandler"
            Collapse="@OnCollapseHandler"
            @bind-Value="@Value"
            ItemContextMenu="@OnItemContextMenuHandler">
    <RadzenTreeLevel Expanded="@ShouldBeExpanded" 
                     HasChildren="@(e => HasChildren(e))"
                     TextProperty="Name">
        <Template>
            @if (Template != null)
            {
                @Template(context)   
            }
        </Template>
    </RadzenTreeLevel>
</RadzenTree>

@code {
    [CascadingParameter] public IModalService ModalService { get; set; } = null!;
    
    [Parameter] public IEnumerable<T> Data { get; set; } = [];
    [Parameter] public string TreeAlias { get; set; } = Constants.Sections.Trees.BaseTree;
    [Parameter] public EventCallback<TreeExpandEventArgs> Expand { get; set; }
    [Parameter] public EventCallback<TreeEventArgs> Collapse { get; set; }
    [Parameter] public EventCallback<TreeItemContextMenuEventArgs> ItemContextMenu { get; set; }
    [Parameter] public EventCallback Change { get; set; }
    [Parameter] public object? Value { get; set; }
    [Parameter] public EventCallback<object> ValueChanged { get; set; }
    [Parameter] public Func<object, bool> HasChildren { get; set; } = null!;
    [Parameter] public Func<object, bool> ShouldBeExpanded { get; set; } = null!;
    [Parameter] public RenderFragment<object>? Template { get; set; }

    [Inject] public TreeState TreeState { get; set; } = null!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = null!;
    [Inject] public ContextMenuService ContextMenuService { get; set; } = null!;
    
    private RadzenTree Tree { get; set; } = null!;

    private Dictionary<int, ITreeContextMenu> ContextMenus { get; set; } = new();

    protected override void OnInitialized()
    {
        var menuItems = ExtensionManager.GetInstances<ITreeContextMenu>(true);
        var filteredMenuItems = menuItems
            .Where(x => x.Value.Sections.Contains(TreeState.CurrentSection ?? "") || x.Value.TreeAlias.Contains(TreeAlias))
            .OrderBy(x => x.Value.SortOrder)
            .ToList();

        for (var i = 0; i < filteredMenuItems.Count; i++)
        {
            var treeContextMenu = filteredMenuItems[i];
            ContextMenus.Add(i, treeContextMenu.Value);
        }
    }

    private async Task OnExpandHandler(TreeExpandEventArgs args)
    {
        if (Expand.HasDelegate)
        {
            await Expand.InvokeAsync(args);
        }
        else
        {
            if (args.Value is ITreeItem treeItem)
            {
                TreeState.NodeExpanded(treeItem.Id);
            }
        }
    }
    
    private async Task OnCollapseHandler(TreeEventArgs args)
    {
        if (Collapse.HasDelegate)
        {
            await Collapse.InvokeAsync(args);
        }
        else
        {
            if (args.Value is ITreeItem treeItem)
            {
                TreeState.NodeCollapsed(treeItem.Id);
            }
        }
    }

    private async Task OnChangeHandler()
    {
        await ValueChanged.InvokeAsync(Value);
        if (Change.HasDelegate)
        {
            await Change.InvokeAsync();
        }
    }

    private async Task OnItemContextMenuHandler(TreeItemContextMenuEventArgs args)
    {
        if (ItemContextMenu.HasDelegate)
        {
            await ItemContextMenu.InvokeAsync(args);
        }
        else
        {
            if (ContextMenus.Any())
            {
                ContextMenuService.Open(args,
                    MenuItems(args), async void (e) => await MenuAction(args, e, NavigationManager, ContextMenuService, ModalService));            
            }
        }
    }

    private List<ContextMenuItem> MenuItems(TreeItemContextMenuEventArgs args)
    {
        var menu = new List<ContextMenuItem>();
        
        foreach (var kvp in ContextMenus)
        {
            if (kvp.Value.CanShowContextMenu(args))
            {
                menu.Add(new ContextMenuItem{ Text = kvp.Value.Text(args), Value = kvp.Key, Icon = kvp.Value.Icon(args), IconColor = kvp.Value.IconColor(args) });        
            }
        }

        return menu;
    }

    private Task MenuAction(TreeItemContextMenuEventArgs args, MenuItemEventArgs e, NavigationManager navigationManager, ContextMenuService contextMenuService, IModalService modalService)
    {
        var value = (int)e.Value;
        if (ContextMenus.TryGetValue(value, out var contextMenu))
        {
            return contextMenu.ContextMenuAction(args, e, navigationManager, contextMenuService, modalService);
        }
        return Task.CompletedTask;
    }
}
