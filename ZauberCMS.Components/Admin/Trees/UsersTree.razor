@using ZauberCMS.Core.Shared
@using ZauberCMS.Core.Shared.Models

<BaseTree
    T="TreeStub"
    Data="@Data"
    TreeAlias="@Constants.Sections.Trees.UsersTree"
    Expand="@OnExpandHandler"
    Change="@OnChangeHandler"
    @bind-Value="@Value"
    HasChildren="@(e => HasChildren(e))"
    ShouldBeExpanded="@(e => ShouldBeExpanded(e))"
    Template="@(TreeExtensions.CreateStandardTreeTemplate<object>())">
</BaseTree>

@code {
    [Parameter] public IEnumerable<TreeStub> Data { get; set; } = [];
    [Parameter] public EventCallback<TreeExpandEventArgs> OnExpand { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public object? Value { get; set; }
    [Parameter] public EventCallback<object> ValueChanged { get; set; }

    [Inject] public TreeState TreeState { get; set; } = null!;
    
    private RadzenTree Tree { get; set; } = null!;

    private async Task OnExpandHandler(TreeExpandEventArgs args)
    {
        if (OnExpand.HasDelegate)
        {
            await OnExpand.InvokeAsync(args);
        }
        else
        {
            switch (args.Value)
            {
                case TreeStub treeStub:
                    args.Children.Data = treeStub.Branches;
                    args.Children.TextProperty = "Name";
                    args.Children.Template = TreeExtensions.CreateStandardTreeTemplate<RadzenTreeItem>();
                    args.Children.HasChildren = HasChildren;
                    TreeState.NodeExpanded(treeStub.Id);
                    break;
                case TreeBranch branch:
                    args.Children.Data = branch.Branches;
                    args.Children.TextProperty = "Name";
                    args.Children.Template = TreeExtensions.CreateStandardTreeTemplate<RadzenTreeItem>();
                    args.Children.HasChildren = HasChildren;
                    TreeState.NodeExpanded(branch.Id);
                    break;
            }
        }
    }

    private async Task OnChangeHandler()
    {
        await ValueChanged.InvokeAsync(Value);
        if (OnChange.HasDelegate)
        {
            await OnChange.InvokeAsync();
        }
    }

    private bool HasChildren(object data)
    {
        return data switch
        {
            TreeStub tree => tree.Branches.Any(),
            TreeBranch branch => branch.Branches.Any(),
            _ => false
        };
    }

    private bool ShouldBeExpanded(object data)
    {
        return data switch
        {
            TreeStub tree => TreeState.IsNodeExpanded(tree.Id) || tree.Branches.Any(),
            TreeBranch branch => TreeState.IsNodeExpanded(branch.Id),
            _ => false
        };
    }

}