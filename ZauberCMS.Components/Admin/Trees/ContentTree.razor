@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Shared
@implements IDisposable

<BaseTree
    T="Content"
    Data="@Data"
    Expand="@OnExpandHandler"
    Change="@OnChangeHandler"
    ItemContextMenu="@OnItemContextMenuHandler"
    @bind-Value="@Value"
    HasChildren="@(e => HasChildren(e))"
    ShouldBeExpanded="@(e => ShouldBeExpanded(e))"
    Template="@(CreateTreeTemplate<object>())">
</BaseTree>

@code {
    [Inject] public AppState AppState { get; set; } = null!;
    [Inject] public TreeState TreeState { get; set; } = null!;
    
    [Parameter] public IEnumerable<Content> Data { get; set; } = [];
    [Parameter] public EventCallback<TreeExpandEventArgs> OnExpand { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public EventCallback<TreeItemContextMenuEventArgs> OnItemContextMenu { get; set; }
    [Parameter] public object? Value { get; set; }
    [Parameter] public EventCallback<object> ValueChanged { get; set; }

    // Dictionary to cache HasChildren results
    
    protected override void OnInitialized()
    {
        AppState.OnContentChanged += HandleContentChanged;
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (!Data.Any())
        {
            var items = await Mediator.Send(new QueryContentCommand
            {
                AmountPerPage = 100,
                WhereClause = x => x.IsRootContent,
                IncludeChildren = true,
                OrderBy = GetContentsOrderBy.SortOrder
            });
            
            Data = items.Items.ToList();
        }
    }
    
    private Task HandleContentChanged(Content? media, string username)
    {
        TreeState.ClearChildCache(null);
        return Task.CompletedTask;
    }

    private async Task OnExpandHandler(TreeExpandEventArgs args)
    {
        if (OnExpand.HasDelegate)
        {
            await OnExpand.InvokeAsync(args);
        }
        else
        {
            if (args.Value is Content content)
            {
                var items = Mediator.Send(new QueryContentCommand
                {
                    IncludeUnpublished = true,
                    WhereClause = x => x.ParentId == content.Id,
                    OrderBy = GetContentsOrderBy.SortOrder
                }).GetAwaiter().GetResult();
                args.Children.Data = items.Items;
                args.Children.TextProperty = "Name";
                args.Children.Template = CreateTreeTemplate<RadzenTreeItem>();
                args.Children.HasChildren = HasChildren;
                
                TreeState.NodeExpanded(content.Id);
            }
        }
    }


    private RenderFragment<T> CreateTreeTemplate<T>() where T : class
    {
        return context => builder =>
        {
            var treeItem = context as RadzenTreeItem;
            if (treeItem?.Value is Content content)
            {
                string opacity;
                if (content.UnpublishedContent != null)
                {
                    opacity = "0.6";
                }
                else
                {
                    opacity = content.Published ? "1" : "0.6";
                }
                if (!string.IsNullOrWhiteSpace(content.ContentType?.Icon))
                {
                    builder.OpenComponent<RadzenIcon>(0);
                    builder.AddAttribute(1, "Icon", content.ContentType.Icon);
                    builder.AddAttribute(2, "style", $"font-weight: 300; color: dimgray; opacity: {opacity};");
                    builder.CloseComponent();
                }
                
                builder.OpenElement(3, "span"); // using span as the container for the text
                builder.AddAttribute(4, "style", $"opacity: {opacity};"); // applying the opacity to the span
                builder.AddContent(5, content.Name); // the text
                builder.CloseElement();
            }
        };
    }

    private async Task OnChangeHandler()
    {
        await ValueChanged.InvokeAsync(Value);
        if (OnChange.HasDelegate)
        {
            await OnChange.InvokeAsync();
        }
    }

    private async Task OnItemContextMenuHandler(TreeItemContextMenuEventArgs args)
    {
        if (OnItemContextMenu.HasDelegate)
        {
            await OnItemContextMenu.InvokeAsync(args);
        }
    }

    private bool HasChildren(object data)
    {
        if (data is Content content)
        {
            // Check if result is cached
            if (TreeState.HasChildrenCache.TryGetValue(content.Id, out var hasChildren))
            {
                return !content.ContentType!.EnableListView && hasChildren;
            }

            // Calculate result and cache it
            hasChildren = Task.Run(() => Mediator.Send(new HasChildContentCommand { ParentId = content.Id })).GetAwaiter().GetResult();
            TreeState.SetChildren(content.Id, hasChildren);

            return !content.ContentType!.EnableListView && hasChildren;
        }

        return false;
    }

    private bool ShouldBeExpanded(object data)
    {
        if (data is Content content)
        {
            return (HasChildren(content) && content.ParentId == null) || TreeState.IsNodeExpanded(content.Id);
        }

        return false;
    }

    public void Dispose()
    {
        AppState.OnContentChanged -= HandleContentChanged;
    }
}