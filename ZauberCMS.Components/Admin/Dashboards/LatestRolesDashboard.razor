@using ZauberCMS.Core.Data.Commands
@using ZauberCMS.Core.Membership.Commands
@using ZauberCMS.Core.Membership.Models
@implements ZauberCMS.Core.Sections.Interfaces.ISectionDashboard

<RadzenDataGrid AllowFiltering="true"
                FilterPopupRenderMode="PopupRenderMode.Initial"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowPaging="true"
                PageSize="@AmountPerPage"
                AllowSorting="true"
                LoadData="@LoadData"
                IsLoading="@IsLoading"
                Count="@Count"
                Data="@Roles"
                SelectionMode="DataGridSelectionMode.Single"
                RowSelect="@((Role value) => OnRowSelect(value))"
                PagerHorizontalAlign="HorizontalAlign.Center">
    @*@bind-Value="@SelectedContent"*@
    <Columns>
        <RadzenDataGridColumn Property="Name" Title="Name"/>
        <RadzenDataGridColumn Property="DateUpdated" Title="Last Updated">
            <Template Context="data">
                @data.DateUpdated.Humanize()
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter] public int AmountPerPage { get; set; } = 20;
    [Parameter] public bool RefreshPage { get; set; }
    
    public string TabName => "Latest Roles";
    public int SortOrder => 1;
    public string SectionAlias => Constants.Sections.UsersSection;

    private IEnumerable<Role> Roles { get; set; } = [];
    private int Count { get; set; } 
    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData(new LoadDataArgs {Top = AmountPerPage});
    }
    
    async Task LoadData(LoadDataArgs args)
    {
        IsLoading = true;

        await Task.Yield();

        var command = new DataGridCommand<Role>();
        
        if (args.Top != null)
        {
            command.Take = args.Top.Value;
        }

        if (args.Skip != null)
        {
            command.Skip = args.Skip.Value;
        }

        if (!string.IsNullOrEmpty(args.Filter))
        {
            // Filter via the Where method
            command.Filter = args.Filter;
        }

        // Sort via the OrderBy method
        command.OrderBy = !string.IsNullOrEmpty(args.OrderBy) ? args.OrderBy : "DateCreated desc";

        var result = await Mediator.Send(command);
        Count = result.Count;
        Roles = result.Items;

        IsLoading = false;
    }

    private void OnRowSelect(object value)
    {
        if (value is Role selectedRow)
        {
            NavigationManager.NavigateTo($"{Urls.AdminUsersEditRole}/{selectedRow.Id}", RefreshPage);
        }
    }

}