@using ZauberCMS.Core.Content.Interfaces
@using ZauberCMS.Core.Shared.Models

<EditorRow>
    <LeftColumn>
        <RadzenTextBox class="w-full rz-mb-2" Name="Name" Value="@Property.Name"
                       ValueChanged="@((string name) => { Property.Name = name; Property.Alias = SlugHelper.GenerateSlug(name); })"
                       Style="font-size: 13px; color: #000;" Placeholder="Name" aria-label="Property Name"/>
        <RadzenText Text="@Property.Alias" TextStyle="TextStyle.Caption"/>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
            <RadzenSwitch @bind-Value="@Property.IsRequired" Name="IsRequired"/>
            <RadzenLabel Text="Value Required" Style="font-size: 13px;" Component="IsRequired"/>
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
            <RadzenSwitch @bind-Value="@Property.FullWidth" Name="FullWidth"/>
            <RadzenLabel Text="Full Width" Style="font-size: 13px;" Component="FullWidth"/>
        </RadzenStack>
        <RadzenTextArea Style="font-size: 12px;" @bind-Value="@Property.Description" Placeholder="Description..."/>
    </LeftColumn>
    <CentreColumn>
        <RadzenCard class="rz-background-color-base-200" Style="height: 100%; display: flex; justify-content: center; align-items: center;">
            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="0.2rem">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0.2rem">
                    @if (ContentProperty.Icon.IsNullOrWhiteSpace() == false)
                    {
                        <RadzenIcon Icon="@(ContentProperty.Icon)" IconStyle="IconStyle.Info" Style="line-height: 20px; height: 20px; font-size: 20px; margin-right: 5px;"/>
                    }
                    <div style="font-weight: 600;">@(ContentProperty.Name)</div>
                </RadzenStack>
                <div style="font-style: italic">@(ContentProperty.Alias)</div>
                <div style="font-size: 14px">@ContentProperty.Description</div>
            </RadzenStack>
        </RadzenCard>
    </CentreColumn>
    <RightColumn>
        <RadzenButton Icon="keyboard_arrow_up" style="height: 100%;" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" title="Move up" Click="@(() => OnSortUp.InvokeAsync(Property))"/>
        <RadzenButton Icon="clear" style="height: 100%;" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" title="Delete" Click="@(() => OnDelete.InvokeAsync(Property))"/>
        <RadzenButton Icon="keyboard_arrow_down" style="height: 100%;" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" title="Move Down" Click="@(() => OnSortDown.InvokeAsync(Property))"/>
        <RadzenButton Icon="low_priority" style="height: 100%;" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" title="Change Tab" Click="@(() => OnChangeTab.InvokeAsync(Property))"/>
        <RadzenButton Icon="settings" style="height: 100%;" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" title="Edit Settings" Click="@(() => OnSettings.InvokeAsync(Property))"/>
    </RightColumn>
</EditorRow>

@code {
    [Parameter, EditorRequired] public PropertyType Property { get; set; } = null!;
    [Parameter, EditorRequired] public IContentProperty ContentProperty { get; set; } = null!;
    [Parameter, EditorRequired] public EventCallback<PropertyType> OnSortUp { get; set; }
    [Parameter, EditorRequired] public EventCallback<PropertyType> OnSortDown { get; set; }
    [Parameter, EditorRequired] public EventCallback<PropertyType> OnDelete { get; set; }
    [Parameter, EditorRequired] public EventCallback<PropertyType> OnChangeTab { get; set; }
    [Parameter, EditorRequired] public EventCallback<PropertyType> OnSettings { get; set; }
    [Parameter, EditorRequired] public SlugHelper SlugHelper { get; set; } = null!;
}