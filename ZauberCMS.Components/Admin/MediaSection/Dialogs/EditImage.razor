@using ZauberCMS.Core.Media.Models

<!-- Container with dynamic size -->
<div @ref="_containerRef"
     style="position: relative;
         width: @(ContainerWidth)px;
     height: @(ContainerHeight)px;
     border: 1px solid #ccc;
     overflow: hidden;"
     @onmousedown="OnMouseDown"
     @onmousemove="OnMouseMove"
     @onmouseup="OnMouseUp"
     @onmouseleave="OnMouseLeave"
     @ondblclick="ResetCropBox">

    <!-- Image scaled to fit -->
    <img src="@($"/{Media.Url}")"
         alt="@Media.Name"
         style="max-width: 100%; height: auto;" />

    <!-- Crop box overlay -->
    <div style="@GetCropBoxStyle()"
         @onmousedown="OnCropBoxMouseDown"
         @onmousedown:stopPropagation="true">
        <!-- Corner Handles -->
        <div style="@GetHandleStyle(CornerHandle.TopLeft)"
             @onmousedown="(e) => OnHandleMouseDown(e, CornerHandle.TopLeft)"
             @onmousedown:stopPropagation="true"></div>
        <div style="@GetHandleStyle(CornerHandle.TopRight)"
             @onmousedown="(e) => OnHandleMouseDown(e, CornerHandle.TopRight)"
             @onmousedown:stopPropagation="true"></div>
        <div style="@GetHandleStyle(CornerHandle.BottomLeft)"
             @onmousedown="(e) => OnHandleMouseDown(e, CornerHandle.BottomLeft)"
             @onmousedown:stopPropagation="true"></div>
        <div style="@GetHandleStyle(CornerHandle.BottomRight)"
             @onmousedown="(e) => OnHandleMouseDown(e, CornerHandle.BottomRight)"
             @onmousedown:stopPropagation="true"></div>
    </div>
</div>

<!-- Display crop coordinates -->
<div class="mt-3">
    <p>Original Width: @Media.Width px</p>
    <p>Original Height: @Media.Height px</p>
    
    <p>Crop Box Left: @CropLeft px</p>
    <p>Crop Box Top: @CropTop px</p>
    <p>Crop Box Width: @CropWidth px</p>
    <p>Crop Box Height: @CropHeight px</p>

    @if (Media.Width != ContainerWidth || Media.Height != ContainerHeight)
    {
        <p>Scaled Crop Left: @ScaledLeft px</p>
        <p>Scaled Crop Top: @ScaledTop px</p>
        <p>Scaled Crop Width: @ScaledWidth px</p>
        <p>Scaled Crop Height: @ScaledHeight px</p>
    }

    <button @onclick="SaveCropInfo">Save Crop Info (Console)</button>
    <button @onclick="ShowImageSharpUrl">Show ImageSharp URL</button>

    @if (!string.IsNullOrEmpty(ImageSharpUrl))
    {
        <div class="mt-2">
            <p><strong>ImageSharp Crop URL:</strong> @ImageSharpUrl</p>
            <img src="@ImageSharpUrl" alt="Cropped Preview" style="max-width: 300px;"/>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired] public Media Media { get; set; } = null!;
    [Parameter] public int MaxContainerWidth { get; set; } = 800;
    [Parameter] public int MaxContainerHeight { get; set; } = 600;

    private long ContainerWidth { get; set; }
    private long ContainerHeight { get; set; }
    private ElementReference _containerRef;

    private double CropLeft { get; set; }
    private double CropTop { get; set; }
    private double CropWidth { get; set; }
    private double CropHeight { get; set; }

    private bool _isDraggingBox;
    private bool _isResizing;
    private CornerHandle? _activeHandle;
    private double _initialMouseX, _initialMouseY;
    private double _initialLeft, _initialTop, _initialWidth, _initialHeight;

    private string ImageSharpUrl { get; set; } = string.Empty;

    private double ScaleX => (double)Media.Width / ContainerWidth;
    private double ScaleY => (double)Media.Height / ContainerHeight;

    private double ScaledLeft => CropLeft * ScaleX;
    private double ScaledTop => CropTop * ScaleY;
    private double ScaledWidth => CropWidth * ScaleX;
    private double ScaledHeight => CropHeight * ScaleY;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Media != null)
        {
            // If image is smaller than max size, use original size
            if (Media.Width <= MaxContainerWidth && Media.Height <= MaxContainerHeight)
            {
                ContainerWidth = Media.Width;
                ContainerHeight = Media.Height;
            }
            else
            {
                // Scale down to fit within max size, maintaining aspect ratio
                double scaleX = (double)MaxContainerWidth / Media.Width;
                double scaleY = (double)MaxContainerHeight / Media.Height;
                double scalingFactor = Math.Min(scaleX, scaleY);
                ContainerWidth = (int)(Media.Width * scalingFactor);
                ContainerHeight = (int)(Media.Height * scalingFactor);
            }

            // Initialize crop box to 80% of container, centered
            CropWidth = ContainerWidth * 0.8;
            CropHeight = ContainerHeight * 0.8;
            CropLeft = (ContainerWidth - CropWidth) / 2;
            CropTop = (ContainerHeight - CropHeight) / 2;
        }
    }

    private string GetCropBoxStyle() => $@"
        position: absolute;
        left: {CropLeft}px;
        top: {CropTop}px;
        width: {CropWidth}px;
        height: {CropHeight}px;
        border: 2px dashed red;
        background-color: rgba(255, 255, 255, 0.3);
        cursor: move;
    ";

    private string GetHandleStyle(CornerHandle handle)
    {
        const int handleSize = 10;
        string baseStyle = $@"
            position: absolute;
            width: {handleSize}px;
            height: {handleSize}px;
            background-color: blue;
            z-index: 2;
            cursor: nwse-resize;
        ";
        return handle switch
        {
            CornerHandle.TopLeft => $"{baseStyle} top: 0; left: 0; transform: translate(-50%, -50%);",
            CornerHandle.TopRight => $"{baseStyle} top: 0; right: 0; transform: translate(50%, -50%);",
            CornerHandle.BottomLeft => $"{baseStyle} bottom: 0; left: 0; transform: translate(-50%, 50%);",
            CornerHandle.BottomRight => $"{baseStyle} bottom: 0; right: 0; transform: translate(50%, 50%);",
            _ => baseStyle
        };
    }

    private void OnCropBoxMouseDown(MouseEventArgs e)
    {
        if (!_isResizing)
        {
            _isDraggingBox = true;
            CaptureInitialValues(e);
        }
    }

    private void OnHandleMouseDown(MouseEventArgs e, CornerHandle handle)
    {
        _isDraggingBox = false;
        _isResizing = true;
        _activeHandle = handle;
        CaptureInitialValues(e);
    }

    private void CaptureInitialValues(MouseEventArgs e)
    {
        _initialMouseX = e.ClientX;
        _initialMouseY = e.ClientY;
        _initialLeft = CropLeft;
        _initialTop = CropTop;
        _initialWidth = CropWidth;
        _initialHeight = CropHeight;
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        if (_isDraggingBox)
        {
            var deltaX = e.ClientX - _initialMouseX;
            var deltaY = e.ClientY - _initialMouseY;
            CropLeft = Math.Max(0, Math.Min(ContainerWidth - CropWidth, _initialLeft + deltaX));
            CropTop = Math.Max(0, Math.Min(ContainerHeight - CropHeight, _initialTop + deltaY));
            StateHasChanged();
        }
        else if (_isResizing && _activeHandle.HasValue)
        {
            var deltaX = e.ClientX - _initialMouseX;
            var deltaY = e.ClientY - _initialMouseY;
            switch (_activeHandle.Value)
            {
                case CornerHandle.TopLeft:
                    CropLeft = _initialLeft + deltaX;
                    CropWidth = _initialWidth - deltaX;
                    CropTop = _initialTop + deltaY;
                    CropHeight = _initialHeight - deltaY;
                    break;
                case CornerHandle.TopRight:
                    CropWidth = _initialWidth + deltaX;
                    CropTop = _initialTop + deltaY;
                    CropHeight = _initialHeight - deltaY;
                    break;
                case CornerHandle.BottomLeft:
                    CropLeft = _initialLeft + deltaX;
                    CropWidth = _initialWidth - deltaX;
                    CropHeight = _initialHeight + deltaY;
                    break;
                case CornerHandle.BottomRight:
                    CropWidth = _initialWidth + deltaX;
                    CropHeight = _initialHeight + deltaY;
                    break;
            }

            CropWidth = Math.Max(20, CropWidth);
            CropHeight = Math.Max(20, CropHeight);
            if (CropLeft < 0) { CropWidth += CropLeft; CropLeft = 0; }
            if (CropTop < 0) { CropHeight += CropTop; CropTop = 0; }
            if (CropLeft + CropWidth > ContainerWidth) CropWidth = ContainerWidth - CropLeft;
            if (CropTop + CropHeight > ContainerHeight) CropHeight = ContainerHeight - CropTop;

            StateHasChanged();
        }
    }

    private void OnMouseUp(MouseEventArgs e)
    {
        _isDraggingBox = false;
        _isResizing = false;
        _activeHandle = null;
    }

    private void OnMouseLeave(MouseEventArgs e) => OnMouseUp(e);

    private void OnMouseDown(MouseEventArgs e) { /* Optional: Add new crop region logic here */ }

    private void ResetCropBox(MouseEventArgs e)
    {
        CropWidth = ContainerWidth * 0.8;
        CropHeight = ContainerHeight * 0.8;
        CropLeft = (ContainerWidth - CropWidth) / 2;
        CropTop = (ContainerHeight - CropHeight) / 2;
        StateHasChanged();
    }

    private void SaveCropInfo()
    {
        Console.WriteLine($"Crop Box (Container): Left={CropLeft}, Top={CropTop}, Width={CropWidth}, Height={CropHeight}");
        Console.WriteLine($"Crop Box (Original): Left={ScaledLeft}, Top={ScaledTop}, Width={ScaledWidth}, Height={ScaledHeight}");
    }

    private void ShowImageSharpUrl()
    {
        // Calculate the crop box in original image coordinates
        var x = (int)Math.Max(0, Math.Min(Media.Width - 1, Math.Floor(ScaledLeft)));
        var y = (int)Math.Max(0, Math.Min(Media.Height - 1, Math.Floor(ScaledTop)));
        var w = (int)Math.Max(1, Math.Min(Media.Width - x, Math.Floor(ScaledWidth)));
        var h = (int)Math.Max(1, Math.Min(Media.Height - y, Math.Floor(ScaledHeight)));

        // Calculate the center of the crop box
        double centerX = x + w / 2.0;
        double centerY = y + h / 2.0;

        // Calculate rxy as fractions (between 0 and 1)
        double rx = centerX / Media.Width;
        double ry = centerY / Media.Height;

        // Construct the URL with rxy as fractions
        ImageSharpUrl = $"/{Media.Url}?width={w}&height={h}&rmode=crop&rxy={rx:0.####},{ry:0.####}";

        // Update the UI
        StateHasChanged();
    }

    enum CornerHandle { TopLeft, TopRight, BottomLeft, BottomRight }
}