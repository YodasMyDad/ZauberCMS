@using Microsoft.AspNetCore.Components.Authorization
@using ZauberCMS.Core.Media.Models
@using ZauberCMS.Core.Media.Commands
@using ZauberCMS.Core.Shared
@layout SectionLayout
@implements IDisposable
@attribute [Route($"{Urls.AdminMediaFolder}/{{FolderId:guid}}")]

<PageTitle>Listing Media</PageTitle>

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Right" Gap="5" Style="margin-top: -5px; padding-top: 0; padding-bottom: 10px;">
    <RadzenButton Text="Edit" ButtonStyle="ButtonStyle.Secondary" Click="@(() => NavigationManager.NavigateTo($"{Urls.AdminUpdateMedia}/{FolderId}"))" />
    <CreateMediaButtons ParentId="FolderId"/>
</RadzenStack>

<RadzenPanel Class="rz-mx-auto">

    <RadzenTabs @bind-SelectedIndex="@SelectedIndex">
        <Tabs>
            <RadzenTabsItem Text="Media">
                <RadzenDataGrid AllowFiltering="false"
                                FilterPopupRenderMode="PopupRenderMode.OnDemand"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowPaging="false"
                                PageSize="20"
                                AllowSorting="true"
                                Data="@Contents"
                                SelectionMode="DataGridSelectionMode.Single"
                                RowSelect="@((Media value) => OnRowSelect(value))">
                    <Columns>
                        <RadzenDataGridColumn Property="MediaType" Title="Type">
                            <Template Context="data">
                                @if (data.MediaType == MediaType.Image)
                                {
                                    <img src="@data.Url?width=25&height=25&rmode=max" class="rounded" alt=""/>
                                }
                                else
                                {
                                    <RadzenIcon Icon="@data.MediaType.GetIcon()"/>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="Name" Title="Name">
                            <Template Context="data">
                                <div>@data.Name</div>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="FileSize" Title="Size"/>
                        <RadzenDataGridColumn Property="DateUpdated" Title="Last Updated">
                            <Template Context="data">
                                @data.DateUpdated.Humanize()
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Upload">
                <MultipleMediaUpload ParentId="@FolderId"/>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>

</RadzenPanel>


@code {
    [Inject] public AppState AppState { get; set; } = null!;
    [CascadingParameter] protected SectionLayout? Layout { get; set; }

    [Parameter] public Guid FolderId { get; set; }

    private IEnumerable<Media> Contents { get; set; } = [];
    private int SelectedIndex { get; set; }
    private Media? EditFolder { get; set; }
    private AuthenticationState AuthState { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        await SetContents(FolderId);
        EditFolder = await Mediator.Send(new GetMediaCommand { Id = FolderId });
    }

    protected override void OnInitialized()
    {
        Layout?.SetSection(Constants.Sections.MediaSection);
        AppState.OnMediaChanged += HandleMediaChanged;
    }

    public void Dispose()
    {
        AppState.OnMediaChanged -= HandleMediaChanged;
    }

    private async Task HandleMediaChanged(Media? media, string username)
    {
        await SetContents(FolderId);
        StateHasChanged();
    }

    private async Task SetContents(Guid folderId)
    {
        var items = await Mediator.Send(new QueryMediaCommand
        {
            AmountPerPage = 200,
            OrderBy = GetMediaOrderBy.Name,
            WhereClause = media => media.ParentId == folderId
        });

        Contents = items.Items;
    }

    private void OnRowSelect(object value)
    {
        if (value is Media { MediaType: MediaType.Folder } folder)
        {
            NavigationManager.NavigateTo($"{Urls.AdminMediaFolder}/{folder.Id}");
        }
        else if (value is Media media)
        {
            NavigationManager.NavigateTo($"{Urls.AdminUpdateMedia}/{media.Id}");
        }
    }

}