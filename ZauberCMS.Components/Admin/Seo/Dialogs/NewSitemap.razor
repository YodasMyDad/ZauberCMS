@using System.Text.Json
@using ZauberCMS.Components.Admin.Seo.Models
@using ZauberCMS.Components.Editors.Models
@using ZauberCMS.Core.Content.Commands

<EditorRow>
    <LeftColumn>
        <PropertyInfo Name="Select Website Root" Description="Select the website root that should be used for the sitemap." />
    </LeftColumn>
    <CentreColumn>
        <ContentPickerProperty
            Value="@SelectedRootContentIdAsString"
            Settings="@(JsonSerializer.Serialize(new ContentPickerSettings { MaxAllowed = 1, OnlyRootContent = true }))"
            ValueChanged="@(e => ContentSelected(e))"/>
    </CentreColumn>
</EditorRow>

@if (SelectedRootContentIdAsString != null)
{
    <EditorRow>
        <LeftColumn>
            <PropertyInfo Name="Name" Description="The name of the sitemap (Used for the file name)" />
        </LeftColumn>
        <CentreColumn>
            <RadzenTextBox Name="Name" @bind-Value="@SeoSitemap!.Name" Style="width: 100%;" />
        </CentreColumn>
    </EditorRow>

    <EditorRow>
        <LeftColumn>
            <PropertyInfo Name="Content Types" Description="Choose the content types that should be included in the sitemap." />
        </LeftColumn>
        <CentreColumn>
            <RadzenListBox @bind-Value="@SeoSitemap!.ContentTypeIds"
                           Data="@ContentTypes"
                           FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                           FilterOperator="StringFilterOperator.StartsWith"
                           AllowFiltering="true"
                           TextProperty="Name"
                           ValueProperty="Id"
                           Multiple="true"
                           AllowClear="true"
                           Placeholder="Select Content Types" Style="width: 100%; height: 250px"
                           InputAttributes="@(new Dictionary<string, object> { { "aria-label", "select content types" } })"/>
        </CentreColumn>
    </EditorRow>
    
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center" class="rz-mt-3">
        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Save" Click="OnPropertySelected"/>
    </RadzenStack>
}

@code {
    [Inject] NotificationService NotificationService { get; set; } = null!;
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = null!;

    [Parameter] public SeoSitemap? SeoSitemap { get; set; }
    private string? SelectedRootContentIdAsString { get; set; }
    private List<ContentType> ContentTypes { get; set; } = [];

    private async Task ContentSelected(string e)
    {
        SelectedRootContentIdAsString = e;
        if (Guid.TryParse(e, out var contentId))
        {
            SeoSitemap!.RootContentId = contentId;
            SeoSitemap.RootContent = await Mediator.GetContent(contentId);
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (SeoSitemap != null)
        {
            SelectedRootContentIdAsString = SeoSitemap.RootContentId.ToString();
        }
        else
        {
            SeoSitemap = new SeoSitemap();
        }
        
        var contentTypes = await Mediator.Send(new QueryContentTypesCommand { ElementTypesOnly = false, OrderBy = GetContentTypesOrderBy.Name, AmountPerPage = 1000});
        ContentTypes = contentTypes.Items.ToList();
    }

    private async Task OnPropertySelected()
    {
        if (SeoSitemap!.Name.IsNullOrWhiteSpace() || SeoSitemap.ContentTypeIds.Any() == false)
        {
            NotificationService.ShowErrorNotification("You need to complete all fields");
        }
        else
        {
            await BlazoredModal.CloseAsync(ModalResult.Ok(SeoSitemap));
        }
    }
}