@using ZauberCMS.Core.Membership.Models
@using ZauberCMS.Core.Membership.Commands

@attribute [Route($"{Urls.AdminUsersList}/{{RoleId:guid}}")]

@layout SectionLayout

<RadzenPanel Class="rz-mx-auto">

    <RadzenDataGrid AllowFiltering="true"
                    FilterPopupRenderMode="PopupRenderMode.OnDemand"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowPaging="true"
                    PageSize="30"
                    AllowSorting="true"
                    Data="@Users"
                    SelectionMode="DataGridSelectionMode.Single"
                    RowSelect="@((User value) => OnRowSelect(value))">
        @*@bind-Value="@SelectedContent"*@
        <Columns>
            <RadzenDataGridColumn Property="Username" Title="Username"/>
            <RadzenDataGridColumn Property="Email" Title="Email"/>
            <RadzenDataGridColumn Property="DateUpdated" Title="Last Updated">
                <Template Context="data">
                    @data.DateUpdated.Humanize()
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    
</RadzenPanel>

@code {
    [Parameter] public Guid? RoleId { get; set; }
    
    [CascadingParameter] protected SectionLayout? Layout { get; set; }
    
    private IEnumerable<User> Users { get; set; } = [];

    protected override async Task OnParametersSetAsync()
    {
        if (RoleId != null)
        {
            var role = await Mediator.Send(new GetRoleCommand {Id = RoleId.Value});
            var items = await Mediator.Send(new QueryUsersCommand
            {
                AmountPerPage = 200,
                OrderBy = GetUsersOrderBy.DateCreatedDescending,
                Roles = [role.Name!]
            });
            Users = items.Items;   
        }
    }

    protected override void OnInitialized()
    {
        Layout?.SetSection(Constants.Sections.UsersSection);
    }
    
    private void OnRowSelect(object value)
    {
        if (value is User selectedRow)
        {
            NavigationManager.NavigateTo($"{Urls.AdminUsersEdit}/{selectedRow.Id}");
        }
    }
}