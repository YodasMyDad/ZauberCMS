@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using ZauberCMS.Components.Admin.UsersSection.Dialogs
@using ZauberCMS.Core.Content.Interfaces
@using ZauberCMS.Core.Membership.Commands
@using ZauberCMS.Core.Membership.Models
@using ZauberCMS.Core.Shared
@using ZauberCMS.Core.Shared.Models
@using ZauberCMS.Core.Shared.Services
@using ZauberCMS.Core.Plugins
@layout SectionLayout

@attribute [Route($"{Urls.AdminUsersEdit}/{{UserId:guid}}")]

<PageTitle>Edit User</PageTitle>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center"
             Gap="5" Style="margin-top: -5px; padding-top: 0; padding-bottom: 10px;">
    <RadzenButton Variant="Variant.Filled" Text="Update Roles" Click="@(UpdateRoles)"/>
    <RadzenButton Variant="Variant.Filled" Text="Change Password" Click="@(ChangePassword)"/>
    <RadzenButton Variant="Variant.Filled" ButtonStyle="ButtonStyle.Danger" Text="Delete" Click="@(DeleteUser)"/>
</RadzenStack>

<RadzenPanel Class="rz-mx-auto">
    @if (UserId == null)
    {
        <p>There is no user id passed in</p>
    }
    else if (User != null)
    {
        <EditForm Model="@User" OnSubmit="Save">

            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center"
                         AlignItems="AlignItems.Start" Gap="0.5rem">
                <RadzenTextBox Style="width: 100%;" Name="Name" Placeholder="Name" Value="@User.UserName"
                               ValueChanged="@((string name) => { User.UserName = name; })" aria-label="Name"/>
                <RadzenTextBox Style="width: 100%;" Name="Email" Placeholder="Email" Value="@User.Email"
                               ValueChanged="@((string name) => { User.Email = name; })" aria-label="Name"/>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left"
                             AlignItems="AlignItems.Center" Gap="0">
                    <RadzenIcon Icon="schedule" Style="line-height: 20px; height: 20px; font-size: 20px;"
                                IconStyle="IconStyle.Light"/>
                    <RadzenText TextStyle="TextStyle.Caption" Style="margin: 0; padding: 0;">Last
                        Updated: @User.DateUpdated.Humanize()</RadzenText>
                </RadzenStack>
            </RadzenStack>
            
            @if (AllTabs.Count > 1)
            {
                <RadzenTabs @ref="Tabs" RenderMode="TabRenderMode.Client" Change="@(i => TabChange(i))">
                    <Tabs>
                        @foreach (var tab in AllTabs.Where(x => !x.IsSystemTab).OrderBy(x => x.SortOrder))
                        {
                            <RadzenTabsItem>
                                <Template Context="tabContext">
                                    @tab.Name
                                </Template>
                                <ChildContent>
                                    <RadzenStack Gap="1rem">
                                        @foreach (var property in AllContentProperties
                                                          .Where(x => x.TabId == tab.Id)
                                                          .OrderBy(x => x.SortOrder))
                                        {
                                            if (property.Component != null)
                                            {
                                                AllProperties.TryGetValue(property.Component, out var contentPropertyComponent);
                                                if (contentPropertyComponent != null)
                                                {
                                                    AllContentValues.TryGetValue(property.Id, out var contentValue);
                                                    if (contentValue != null)
                                                    {
                                                        <EditorRow FullWidth="@(property.FullWidth)">
                                                            <LeftColumn>
                                                                <RadzenLabel Style="font-weight: 600;font-size: 14px;"
                                                                             Text="@property.Name"/>
                                                                <RadzenStack Orientation="Orientation.Horizontal"
                                                                             JustifyContent="JustifyContent.Left"
                                                                             AlignItems="AlignItems.Center" Gap="0">
                                                                    <RadzenIcon Icon="lock_outline"
                                                                                IconStyle="IconStyle.Light"/>
                                                                    <RadzenText TextStyle="TextStyle.Caption"
                                                                                Style="margin: 0; padding: 0;">@property.Alias</RadzenText>
                                                                </RadzenStack>
                                                                <RadzenLabel Style="font-size: 14px;"
                                                                             Text="@property.Description"/>
                                                            </LeftColumn>
                                                            <CentreColumn>
                                                                <DynamicContentProperty
                                                                    ComponentType="@contentPropertyComponent.GetType()"
                                                                    Settings="@property.Settings"
                                                                    Value="@contentValue.Value"
                                                                    ValueChanged="@(value => UpdateProperty(contentValue.ContentTypePropertyId, value))"/>
                                                            </CentreColumn>
                                                        </EditorRow>
                                                    }
                                                }
                                            }
                                        }

                                    </RadzenStack>
                                </ChildContent>
                            </RadzenTabsItem>
                        }
                    </Tabs>
                </RadzenTabs>
            }

            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right"
                         AlignItems="AlignItems.Center">
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Save"/>
            </RadzenStack>

        </EditForm>
    }
</RadzenPanel>


@code {

    [CascadingParameter] BlazoredModalInstance ContentEditorModal { get; set; } = null!;
    [CascadingParameter] IModalService ModalService { get; set; } = null!;
    [Inject] public NotificationService NotificationService { get; set; } = null!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = null!;
    [Inject] public AppState AppState { get; set; } = null!;
    [Inject] public DialogService DialogService { get; set; } = null!;
    [Inject] public UserManager<User> UserManager { get; set; } = null!;
    [Inject] public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;
    [Inject] public ValidateService<User> ValidateService { get; set; } = null!;

    [Parameter] public Guid? UserId { get; set; }

    private User? User { get; set; }
    private string? InitialUsername { get; set; }
    private string? InitialEmail { get; set; }
    private Dictionary<string, IContentProperty> AllProperties { get; set; } = new();
    private Dictionary<Guid, UserPropertyValue> AllContentValues { get; set; } = new();
    private int SelectedTabIndex { get; set; }
    private RadzenTabs? Tabs { get; set; }
    private List<Tab> AllTabs { get; set; } = [];
    private List<PropertyType> AllContentProperties { get; set; } = [];
    private AuthenticationState AuthState { get; set; } = null!;

    [CascadingParameter] protected SectionLayout? Layout { get; set; }

    protected override void OnInitialized()
    {
        Layout?.SetSection(Constants.Sections.UsersSection);
    }

    protected override async Task OnParametersSetAsync()
    {
        AuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        AllProperties = ExtensionManager.GetInstances<IContentProperty>(true);
        if (UserId != null)
        {
            User = await Mediator.Send(new GetUserCommand { Id = UserId.Value });
            InitialUsername = User?.UserName;
            InitialEmail = User?.Email;
            SyncProperties();
        }
    }

    private async Task ChangePassword()
    {
        var dialog = ModalService.OpenSidePanel<ChangePassword>("Change Password",
            new Dictionary<string, object>
            {
                {
                    "UserId", User!.Id
                }
            });
        var result = await dialog.Result;
        if (result is { Confirmed: true, Data: IdentityResult identityResult })
        {
            if (identityResult.Succeeded)
            {
                // Handle success
                var user = await UserManager.FindByIdAsync(User.Id.ToString());
                if (user != null) await UserManager.UpdateSecurityStampAsync(user);
                NotificationService.ShowSuccessNotification("Password Updated");
            }
            else
            {
                // Handle errors
                foreach (var error in identityResult.Errors)
                {
                    NotificationService.ShowErrorNotification(error.Description);
                }
            }
        }

        await AppState.NotifyUserChanged(User, AuthState.User.Identity?.Name!);
    }

    private async Task UpdateRoles()
    {
        var dialog = ModalService.OpenSidePanel<UpdateRoles>("Update Users Roles",
            new Dictionary<string, object>
            {
                {
                    "UserId", User!.Id
                }
            });
        var result = await dialog.Result;
        if (result is { Confirmed: true, Data: List<Guid> roles })
        {
            var allRoles = await Mediator.Send(new QueryRolesCommand { OrderBy = GetRolesOrderBy.Name, AmountPerPage = 200 });
            var roleNames = allRoles.Items.Where(x => roles.Contains(x.Id)).Select(x => x.Name).ToList();
            var roleUpdateResult = await Mediator.Send(new SaveUserCommand { User = User, Roles = roleNames! });
            if (!roleUpdateResult.Success)
            {
                NotificationService.ShowErrorNotification(roleUpdateResult.Messages.MessagesAsString());
            }
            else
            {
                NotificationService.ShowSuccessNotification("Roles Updated");
                if (roleUpdateResult.RefreshSignIn)
                {
                    var currentUrl = System.Net.WebUtility.UrlEncode(NavigationManager.Uri);
                    NavigationManager.NavigateTo($"{Urls.ApiRefreshSignIn}?redirectUrl={currentUrl}", true);
                }
            }
        }

        await AppState.NotifyUserChanged(User, AuthState.User.Identity?.Name!);
    }

    private async Task DeleteUser()
    {
        var delete = await DialogService.Confirm("Do you really want to delete this user?", "Delete", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
        if (delete == true)
        {
            var roleUpdateResult = await Mediator.Send(new DeleteUserCommand { UserId = User!.Id });
            if (!roleUpdateResult.Success)
            {
                await AppState.NotifyUserDeleted(User, AuthState.User.Identity?.Name!);
                NavigationManager.NavigateTo(Urls.AdminUsersBaseUrl);
            }
        }
    }

    private void TabChange(int i)
    {
        SelectedTabIndex = i;
    }

    private Task UpdateProperty(Guid ctpId, string value)
    {
        var property = User!.PropertyData.FirstOrDefault(p => p.ContentTypePropertyId == ctpId);
        if (property != null)
        {
            property.Value = value;
            property.DateUpdated = DateTime.UtcNow;
        }

        return Task.CompletedTask;
    }

    private void SyncProperties()
    {
        if (User != null)
        {
            var roles = User!.UserRoles.Select(x => x.Role);
            var enumerable = roles as Role[] ?? roles.ToArray();
            AllTabs = enumerable.SelectMany(x => x.Tabs).OrderBy(x => x.SortOrder).ToList();
            AllContentProperties = enumerable.SelectMany(x => x.Properties).ToList();

            var toRemove = new List<UserPropertyValue>();
            // Check for properties that were removed
            foreach (var cpd in User.PropertyData)
            {
                var existsInContentType = AllContentProperties.Any(x => x.Id == cpd.ContentTypePropertyId);
                if (!existsInContentType)
                {
                    // Mark for removal
                    toRemove.Add(cpd);
                }
            }

            // Remove the properties
            foreach (var tr in toRemove)
            {
                User.PropertyData.Remove(tr);
            }

            // Check for properties to add
            foreach (var ctp in AllContentProperties)
            {
                var exists = User.PropertyData.FirstOrDefault(x => x.ContentTypePropertyId == ctp.Id);
                if (exists == null)
                {
                    // Add it
                    User.PropertyData.Add(new UserPropertyValue
                    {
                        ContentTypePropertyId = ctp.Id,
                        Alias = ctp.Alias!,
                        UserId = User!.Id
                    });
                }
            }

            AllContentValues = User.PropertyData.ToDictionary(x => x.ContentTypePropertyId, x => x);
        }
    }

    private async Task Save()
    {
        if (await ValidateService.CanSave(User!))
        {
            var saveUserCommand = new SaveUserCommand { User = User };
            var result = await Mediator.Send(saveUserCommand);
            NotificationService.Notify(result.Success ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"{User?.UserName} Saved", Detail = "", Duration = 4000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"{User?.UserName} Error", Detail = "", Duration = 4000 });
            await AppState.NotifyUserSaved(User, AuthState.User.Identity?.Name!);
            if (result is { Success: true, RefreshSignIn: true })
            {
                var currentUrl = System.Net.WebUtility.UrlEncode(NavigationManager.Uri);
                NavigationManager.NavigateTo($"{Urls.ApiRefreshSignIn}?redirectUrl={currentUrl}", true);
            }
        }
    }

}