@using ZauberCMS.Components.Admin.Trees
@using ZauberCMS.Core.Media.Commands
@using ZauberCMS.Core.Media.Models
@using ZauberCMS.Core.Membership.Commands
@using ZauberCMS.Core.Membership.Models
@using ZauberCMS.Core.Shared.Models
@using ZauberCMS.Core.Shared
@implements ZauberCMS.Core.Sections.Interfaces.ISectionNav

<UsersTree
    Data="@TreeItems"
    OnChange="OnChange"
    @bind-Value="@Selection"
    OnItemContextMenu="ItemContextMenu"/>

@code {
    public int SortOrder => 0;
    public string SectionNavGroupAlias => Constants.Sections.SectionNavGroups.UsersNavGroup;
    
    [Inject] public AppState AppState { get; set; } = default!;
    [Inject] public ContextMenuService ContextMenuService { get; set; } = default!;
    [Inject] public NotificationService NotificationService { get; set; } = default!;
    
    private IEnumerable<TreeStub> TreeItems { get; set; } = [];
    private object? Selection { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await DataRefresh();
        AppState.OnUserChanged += HandleUsersChanged;
    }

    public void Dispose()
    {
        AppState.OnUserChanged -= HandleUsersChanged;
    }

    private async Task HandleUsersChanged(User? user, string username)
    {
        await DataRefresh();
        StateHasChanged();
    }

    private async Task DataRefresh()
    {
        var allRoles = await Mediator.Send(new QueryRolesCommand
        {
            OrderBy = GetRolesOrderBy.Name,
            AmountPerPage = 100 // Should never be more than 100 roles!
        });

        var tree = new List<TreeStub>();
        var usersTree = new TreeStub
        {
            Id = Constants.Guids.UsersTreeRootId,
            Name = "Users",
            Icon = "people",
            SortOrder = 1
        };


        foreach (var role in allRoles.Items)
        {
            usersTree.Branches.Add(new TreeBranch
            {
                Icon = "people",
                Id = role.Id,
                Name = role.Name,
                Url = $"/admin/users/list/{role.Id}",
                BranchType = typeof(User)
            });
        }

        var rolesTree = new TreeStub
        {
            Id = Constants.Guids.RolesTreeRootId,
            Name = "Roles",
            Icon = "person_add",
            SortOrder = 2
        };

        foreach (var role in allRoles.Items)
        {
            rolesTree.Branches.Add(new TreeBranch
            {
                Icon = "person_add",
                Id = role.Id,
                Name = role.Name,
                Url = $"/admin/users/editrole/{role.Id}",
                BranchType = typeof(Role)
            });
        }

        tree.Add(usersTree);
        tree.Add(rolesTree);
        TreeItems = tree;
    }

    private static List<ContextMenuItem> MenuItems(TreeItemContextMenuEventArgs args)
    {
        var items = new List<ContextMenuItem>();
        
        if (args.Value is TreeBranch branch)
        {
            items.Add(new ContextMenuItem { Text = "Delete", Value = 1 });
        }
        
        return items;
    }
    
    private void ItemContextMenu(TreeItemContextMenuEventArgs args)
    {
        /*ContextMenuService.Open(args,
            MenuItems(args), async e =>
            {
                var branch = (TreeBranch)args.Value;
                /*var dbContent = await Mediator.Send(new GetMediaCommand { Id = media.Id, IncludeChildren = true });#1#
                //var text = args.Text;
                switch (e.Value)
                {
                    case 1:
                        var deleteResult = await Mediator.Send(new DeleteUserCommand { UserId = branch.Id });
                        if (deleteResult.Success)
                        {
                            NavigationManager.NavigateTo("/admin/media", forceLoad: true);
                        }
                        else
                        {
                            NotificationService.ShowErrorNotification(deleteResult.Messages.MessagesAsString());
                        }

                        break;
                }
            }
        );*/
    }

    private void OnChange()
    {
        switch (Selection)
        {
            case TreeBranch branch:
                if (branch.Url != null) NavigationManager.NavigateTo(branch.Url);
                break;
        }
    }


}