@using ZauberCMS.Core.Content.Interfaces
@using ZauberCMS.Core.Plugins

<RadzenListBox FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
               FilterOperator="StringFilterOperator.StartsWith"
               AllowFiltering="true"
               @bind-Value="@SelectedProperty"
               Data="@Properties"
               TextProperty="Name"
               ValueProperty="Alias"
               Style="width: 100%; height: 100%;"
               InputAttributes="@(new Dictionary<string, object> { { "aria-label", "select property" } })"
               Change="@OnPropertySelected">
    <Template>
        @{
            var contentTypeProperty = context as IContentProperty;
        }
        <div style="border-bottom: 1px #e1e1e1 solid">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0.2rem">
                @if (contentTypeProperty?.Icon.IsNullOrWhiteSpace() == false)
                {
                    <RadzenIcon Icon="@(contentTypeProperty.Icon)" IconStyle="IconStyle.Info" Style="line-height: 20px; height: 20px; font-size: 20px; margin-right: 5px;"/>
                }
                <RadzenText TextStyle="TextStyle.Body1" Style="margin: 0; padding: 0;">@(contentTypeProperty?.Name)</RadzenText>
            </RadzenStack>
            <div class="rz-pb-2">
                <RadzenText TextStyle="TextStyle.Caption">@(contentTypeProperty?.Description)</RadzenText>
            </div>
        </div>
    </Template>
</RadzenListBox>

@code {
    [Inject] public ExtensionManager ExtensionManager { get; set; } = null!;
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = null!;

    [Parameter] public Guid Id { get; set; }

    private IEnumerable<IContentProperty> Properties { get; set; } = [];
    private string SelectedProperty { get; set; } = string.Empty;

    private Dictionary<string, IContentProperty> AllContentProperties { get; set; } = new();

    protected override void OnInitialized()
    {
        AllContentProperties = ExtensionManager.GetInstances<IContentProperty>(true);
        Properties = AllContentProperties.Select(x => x.Value).OrderBy(x => x.Name);
    }

    private async Task OnPropertySelected()
    {
        await BlazoredModal.CloseAsync(ModalResult.Ok(Properties.FirstOrDefault(x => x.Alias == SelectedProperty)));
    }

}