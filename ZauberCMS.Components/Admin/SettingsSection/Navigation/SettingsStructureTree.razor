@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Shared.Models
@using ZauberCMS.Core.Shared
@using ZauberCMS.Components.Admin.Trees

@implements ZauberCMS.Core.Sections.Interfaces.ISectionNav

<BaseTree
        TreeAlias="@Constants.Sections.Trees.SettingsStructureTree"
        T="TreeStub"
        Data="@StructureData"
        Expand="@OnExpandHandler"
        Change="@OnChange"
        @bind-Value="@Selection"
        HasChildren="@(e => HasChildren(e))"
        ShouldBeExpanded="@(e => ShouldBeExpanded(e))"
        Template="@(TreeExtensions.CreateStandardTreeTemplate<object>())">
    </BaseTree>

@code {
    
    public int SortOrder => 0;
    public string SectionNavGroupAlias => Constants.Sections.SectionNavGroups.SettingsStructureNavGroup;

    [Inject] public IServiceProvider ServiceProvider { get; set; } = null!;
    [Inject] public AppState AppState { get; set; } = null!;
    [Inject] public ContextMenuService ContextMenuService { get; set; } = null!;
    [Inject] public TreeState TreeState { get; set; } = null!;

    private IEnumerable<TreeStub> StructureData { get; set; } = [];
    private object? Selection { get; set; }

    private bool ShouldBeExpanded(object data)
    {
        switch (data)
        {
            case TreeStub tree:
                return TreeState.IsNodeExpanded(tree.Id);
            case TreeBranch branch:
                return TreeState.IsNodeExpanded(branch.Id);
            default:
                return false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await DataRefresh();
        AppState.OnContentTypeChanged += HandleContentTypeTreeChanged;
        TreeState.OnTreeValueChanged += TreeStateOnOnTreeValueChanged;
    }
    
    /// <summary>
    /// Remove the selected state, this is needed if you have multiple trees
    /// or the selected state stays on the tree, even when you click on another tree
    /// </summary>
    /// <param name="obj"></param>
    private void TreeStateOnOnTreeValueChanged(object obj)
    {
        if (obj != Selection)
        {
            Selection = null;
            StateHasChanged();
        }
    }

    private async Task HandleContentTypeTreeChanged(ContentType? contentType, string username)
    {
        await DataRefresh();
        StateHasChanged();
    }

    private async Task DataRefresh()
    {
        await PrepareStructureTree();
    }

    private bool HasChildren(object data)
    {
        return data switch
        {
            TreeStub tree => tree.Branches.Any(),
            TreeBranch branch => branch.Branches.Any(),
            _ => false
        };
    }

    private void OnExpandHandler(TreeExpandEventArgs args)
    {
        switch (args.Value)
        {
            case TreeStub treeStub:
                if (treeStub.Branches.Any())
                {
                    args.Children.Data = treeStub.Branches;
                    args.Children.TextProperty = "Name";
                    args.Children.Template = TreeExtensions.CreateStandardTreeTemplate<RadzenTreeItem>();
                    args.Children.HasChildren = HasChildren;
                    TreeState.NodeExpanded(treeStub.Id);
                }
                break;
            case TreeBranch branch:
                if (branch.Branches.Any())
                {
                    args.Children.Data = branch.Branches;
                    args.Children.TextProperty = "Name";
                    args.Children.Template = TreeExtensions.CreateStandardTreeTemplate<RadzenTreeItem>();   
                    args.Children.HasChildren = HasChildren;
                    TreeState.NodeExpanded(branch.Id);
                }
                break;
        }
    }

    private async Task PrepareStructureTree()
    {
        var items = await Mediator.Send(new QueryContentTypesCommand
        {
            OrderBy = GetContentTypesOrderBy.Name,
            AmountPerPage = 1000 // Meh
        });
        var contentTypes = items.Items.Where(x => x.IsElementType != true).ToList();
        var elementTypes = items.Items.Where(x => x.IsElementType).ToList();

        var tree = new List<TreeStub>();

        var contentTypeTree = new TreeStub
        {
            Id = Constants.Guids.ContentTypeTreeRootId,
            Name = "Content Types",
            Icon = "content_copy",
            SortOrder = 1,
            StubType = typeof(ContentType)
        };

        foreach (var contentType in contentTypes)
        {
            contentTypeTree.Branches.Add(new TreeBranch
            {
                Id = contentType.Id,
                Icon = contentType.Icon,
                Name = contentType.Name,
                BranchType = typeof(ContentType)
            });
        }

        var elementTypeTree = new TreeStub
        {
            Id = Constants.Guids.ElementTypeTreeRootId,
            Name = "Element Types",
            Icon = "explicit",
            SortOrder = 2,
            StubType = typeof(ContentType)
        };

        foreach (var contentType in elementTypes)
        {
            elementTypeTree.Branches.Add(new TreeBranch
            {
                Id = contentType.Id,
                Icon = contentType.Icon,
                Name = contentType.Name,
                BranchType = typeof(ContentType)
            });
        }

        tree.Add(contentTypeTree);
        tree.Add(elementTypeTree);

        StructureData = tree;
    }

    void OnChange()
    {
        TreeState.TreeValue = Selection;
        switch (Selection)
        {
            case TreeStub treeStub:
            {
                if (!treeStub.Url.IsNullOrWhiteSpace())
                {
                    NavigationManager.NavigateTo(treeStub.Url);
                }

                break;
            }
            case TreeBranch treeBranch:
            {
                if (treeBranch.BranchType == typeof(ContentType))
                {
                    NavigationManager.NavigateTo($"{Urls.AdminSettingsUpdateContentType}/{treeBranch.Id}");
                }

                break;
            }
        }
    }

    public void Dispose()
    {
        AppState.OnContentTypeChanged -= HandleContentTypeTreeChanged;
        TreeState.OnTreeValueChanged -= TreeStateOnOnTreeValueChanged;
    }

}