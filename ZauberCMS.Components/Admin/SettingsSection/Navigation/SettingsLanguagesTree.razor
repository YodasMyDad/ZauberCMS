@using ZauberCMS.Core.Shared.Models
@using ZauberCMS.Core.Shared
@using ZauberCMS.Components.Admin.Trees
@using ZauberCMS.Core.Languages.Models

@implements ZauberCMS.Core.Sections.Interfaces.ISectionNav

<BaseTree
    TreeAlias="@Constants.Sections.Trees.SettingsLanguagesTree"
    T="TreeStub"
    Data="@AdvancedData"
    Expand="@OnExpandHandler"
    Change="@OnChange"
    @bind-Value="@Selection"
    HasChildren="@(e => HasChildren(e))"
    ShouldBeExpanded="@(e => ShouldBeExpanded(e))"
    Template="@(TreeExtensions.CreateStandardTreeTemplate<object>())">
</BaseTree>

@code {

    public int SortOrder => 0;
    public string SectionNavGroupAlias => Constants.Sections.SectionNavGroups.SettingsLanguagesNavGroup;
    
    [Inject] public TreeState TreeState { get; set; } = null!;

    private IEnumerable<TreeStub> AdvancedData { get; set; } = [];

    private object? Selection { get; set; }

    private bool ShouldBeExpanded(object data)
    {
        switch (data)
        {
            case TreeStub tree:
                return TreeState.IsNodeExpanded(tree.Id);
            case TreeBranch branch:
                return TreeState.IsNodeExpanded(branch.Id);
            default:
                return false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        TreeState.OnTreeValueChanged += TreeStateOnOnTreeValueChanged;
        await DataRefresh();
    }

    /// <summary>
    /// Remove the selected state
    /// </summary>
    /// <param name="obj"></param>
    private void TreeStateOnOnTreeValueChanged(object obj)
    {
        if (obj != Selection)
        {
            Selection = null;
            StateHasChanged();
        }
    }

    private Task DataRefresh()
    {
        PrepareAdvancedTree();
        return Task.CompletedTask;
    }

    private bool HasChildren(object data)
    {
        return data switch
        {
            TreeStub tree => tree.Branches.Any(),
            TreeBranch branch => branch.Branches.Any(),
            _ => false
        };
    }

    private void OnExpandHandler(TreeExpandEventArgs args)
    {
        switch (args.Value)
        {
            case TreeStub treeStub:
                if (treeStub.Branches.Any())
                {
                    args.Children.Data = treeStub.Branches;
                    args.Children.TextProperty = "Name";
                    args.Children.Template = TreeExtensions.CreateStandardTreeTemplate<RadzenTreeItem>();
                    args.Children.HasChildren = HasChildren;
                    TreeState.NodeExpanded(treeStub.Id);
                }

                break;
            case TreeBranch branch:
                if (branch.Branches.Any())
                {
                    args.Children.Data = branch.Branches;
                    args.Children.TextProperty = "Name";
                    args.Children.Template = TreeExtensions.CreateStandardTreeTemplate<RadzenTreeItem>();
                    args.Children.HasChildren = HasChildren;
                    TreeState.NodeExpanded(branch.Id);
                }

                break;
        }
    }

    private void PrepareAdvancedTree()
    {
        var tree = new List<TreeStub>();

        var languageTree = new TreeStub
        {
            Id = Constants.Guids.LanguageTreeRootId,
            Name = "Languages",
            Icon = "language",
            SortOrder = 1,
            Url = Urls.AdminSettingsLanguages,
            StubType = typeof(Language)
        };

        tree.Add(languageTree);
        
        var languageDictTree = new TreeStub
        {
            Id = Constants.Guids.LanguageDictionaryTreeRootId,
            Name = "Dictionary",
            Icon = "menu_book",
            SortOrder = 2,
            Url = Urls.AdminSettingsLanguageDictionaries,
            StubType = typeof(LanguageDictionary)
        };

        tree.Add(languageDictTree);

        AdvancedData = tree;
    }

    void OnChange()
    {
        TreeState.TreeValue = Selection;
        switch (Selection)
        {
            case TreeStub treeStub:
            {
                if (!treeStub.Url.IsNullOrWhiteSpace())
                {
                    NavigationManager.NavigateTo(treeStub.Url);
                }

                break;
            }
        }
    }

    public void Dispose()
    {
        TreeState.OnTreeValueChanged -= TreeStateOnOnTreeValueChanged;
    }

}