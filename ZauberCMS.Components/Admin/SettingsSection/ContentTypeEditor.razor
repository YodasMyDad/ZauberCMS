@page "/admin/createcontentype"
@page "/admin/updatecontentype/{ContentTypeId:guid}"
@page "/admin/copycontentype/{CopyContentTypeId:guid}"
@using Microsoft.AspNetCore.Components.Authorization
@using ZauberCMS.Components.Editors.Dialogs
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Content.Interfaces
@using ZauberCMS.Core.Plugins
@using ZauberCMS.Core.Shared
@using ZauberCMS.Core.Shared.Services
@using ZauberCMS.Core.Shared.Models
@layout SectionLayout

<PageTitle>Create Content Type</PageTitle>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center" Gap="5" Style="margin-top: -5px; padding-top: 0; padding-bottom: 10px;">
    <RadzenButton Variant="Variant.Filled" Text="Add Property" Click="@(AddProperty)"/>
    <RadzenButton Variant="Variant.Filled" Text="Add Tab" Click="@(() => AddEditTab(null))"/>
    @if (TabIndex.Count > 1 && !TabIndex[SelectedTabIndex].IsSystemTab)
    {
        <RadzenButton Variant="Variant.Filled" Text="Edit Tab" Click="@(() => AddEditTab(TabIndex[SelectedTabIndex]))"/>
    }
    @if (ShowDeleteButton)
    {
        <RadzenButton Variant="Variant.Filled" ButtonStyle="ButtonStyle.Danger" Text="Delete" Click="@(DeleteContentType)"/>
    }
</RadzenStack>

<RadzenPanel Class="rz-mx-auto">
    <EditForm Model="ContentType" OnSubmit="Save">
        <RadzenRow class="rz-pb-6">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" class="w-100" Gap="2">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="width: 40px; height: 40px; border: 1px #ccc solid; cursor: pointer;" @onclick="@(SelectIcon)">
                    <RadzenIcon Icon="@(ContentType.Icon.IsNullOrWhiteSpace() ? "add" : ContentType.Icon)" style="font-weight: 300; color: dimgray;"/>
                </RadzenStack>
                <RadzenTextBox Style="width: 100%;" Name="Name" Placeholder="Name" Value="@ContentType.Name"
                               ValueChanged="@((string name) => { ContentType.Name = name; ContentType.Alias = _slugHelper.GenerateSlug(name); })" aria-label="Name"/>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" class="w-100" Gap="0">
                <RadzenIcon Icon="lock_outline" IconStyle="IconStyle.Light" Style="line-height: 20px; height: 20px; font-size: 20px;"/> <RadzenText TextStyle="TextStyle.Caption" Style="margin: 0; padding: 0;">@ContentType.Alias</RadzenText>
            </RadzenStack>
        </RadzenRow>
        <RadzenTabs @ref="Tabs" RenderMode="TabRenderMode.Client" Change="@(i => TabChange(i))">
            <Tabs>
                @foreach (var tab in OrderedTabs)
                {
                    if (tab.IsSystemTab)
                    {
                        <RadzenTabsItem Text="System">

                            <EditorRow>
                                <LeftColumn>
                                    <PropertyInfo Name="Allowed Views" Description="The views the user can pick to display their content"/>
                                </LeftColumn>
                                <CentreColumn>
                                    <RadzenListBox @bind-Value="@ContentType.AvailableContentViews"
                                                   Data="@ContentViews"
                                                   FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                   FilterOperator="StringFilterOperator.StartsWith"
                                                   AllowFiltering="true"
                                                   TextProperty="Name"
                                                   ValueProperty="FullName"
                                                   Multiple="true"
                                                   AllowClear="true"
                                                   Placeholder="Select Content Views" Style="width: 100%; height: 250px"
                                                   InputAttributes="@(new Dictionary<string, object> { { "aria-label", "select content views" } })"/>
                                </CentreColumn>
                            </EditorRow>

                            <EditorRow>
                                <LeftColumn>
                                    <PropertyInfo Name="Allowed Child Content Types" Description="Optionally limit what child content types can be created"/>
                                </LeftColumn>
                                <CentreColumn>
                                    <RadzenListBox @bind-Value="@ContentType.AllowedChildContentTypes"
                                                   Data="@ContentTypes"
                                                   FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                   FilterOperator="StringFilterOperator.StartsWith"
                                                   AllowFiltering="true"
                                                   TextProperty="Name"
                                                   ValueProperty="Id"
                                                   Multiple="true"
                                                   AllowClear="true"
                                                   Placeholder="Select Content Types" Style="width: 100%; height: 250px"
                                                   InputAttributes="@(new Dictionary<string, object> { { "aria-label", "select child types" } })"/>
                                </CentreColumn>
                            </EditorRow>

                            <EditorRow>
                                <LeftColumn>
                                    <PropertyInfo Name="Allowed At Tree Root" Description="Whether this content can be created at the root of the content tree"/>
                                </LeftColumn>
                                <CentreColumn>
                                    <RadzenSwitch @bind-Value="@ContentType.AllowAtRoot" InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Allow at root" } })"/>
                                </CentreColumn>
                            </EditorRow>

                            <EditorRow>
                                <LeftColumn>
                                    <PropertyInfo Name="Is Element Type" Description="Allows this content type to be used in the Block List Editor"/>
                                </LeftColumn>
                                <CentreColumn>
                                    <RadzenSwitch @bind-Value="@ContentType.IsElementType" InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Is Element Type" } })"/>
                                </CentreColumn>
                            </EditorRow>

                            <EditorRow>
                                <LeftColumn>
                                    <PropertyInfo Name="Enable List View" Description="Show list view of child content instead of them showing as child items in the tree"/>
                                </LeftColumn>
                                <CentreColumn>
                                    <RadzenSwitch Name="EnableListView" @bind-Value="@ContentType.EnableListView"/>
                                </CentreColumn>
                            </EditorRow>

                            <EditorRow>
                                <LeftColumn>
                                    <PropertyInfo Name="Include Child Content" Description="Return children when this page is rendered to save multiple content queries"/>
                                </LeftColumn>
                                <CentreColumn>
                                    <RadzenSwitch Name="IncludeChildren" @bind-Value="@ContentType.IncludeChildren"/>
                                </CentreColumn>
                            </EditorRow>

                        </RadzenTabsItem>
                    }
                    else
                    {
                        <RadzenTabsItem>
                            <Template Context="tabContext">
                                @tab.Name
                            </Template>
                            <ChildContent>
                                <RadzenStack Gap="1rem">
                                    @{
                                        var tabProperties = ContentType.ContentProperties
                                            .Where(x => x.TabId == tab.Id)
                                            .OrderBy(x => x.SortOrder)
                                            .ToList();
                                    }
                                    @if (tabProperties.Any())
                                    {
                                        @foreach (var property in tabProperties)
                                        {
                                            <PropertyEditor Property="property"
                                                            ContentProperty="@(ContentProperties[property.Component!])"
                                                            OnSortUp="@(prop => SortProperty(prop, false))"
                                                            OnSortDown="@(prop => SortProperty(prop, true))"
                                                            OnDelete="@(prop => DeleteProperty(prop))"
                                                            OnChangeTab="@(async (prop) => await ChangeTab(prop))"
                                                            OnSettings="@(async (prop) => await Settings(prop))"
                                                            SlugHelper="@_slugHelper"/>
                                        }
                                    }
                                    else
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
                                            <RadzenButton Variant="Variant.Filled" ButtonStyle="ButtonStyle.Danger" Text="Delete This Tab" Click="@(() => DeleteTab(tab))"/>
                                        </RadzenStack>
                                    }
                                </RadzenStack >
                            </ChildContent>
                        </RadzenTabsItem>
                    }
                }
            </Tabs>
        </RadzenTabs>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center">
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Save"/>
        </RadzenStack>
    </EditForm>
</RadzenPanel>

@code {
    [Inject] public IModalService DialogService { get; set; } = default!;
    [Inject] public NotificationService NotificationService { get; set; } = default!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;
    [Inject] public AppState AppState { get; set; } = default!;
    [Inject] public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    [Inject] public ValidateService<ContentType> ValidateService { get; set; } = default!;
    
    [Parameter] public Guid? ContentTypeId { get; set; }
    [Parameter] public Guid? CopyContentTypeId { get; set; }

    [CascadingParameter] protected SectionLayout? Layout { get; set; }

    private ContentType ContentType { get; set; } = new();
    private List<ContentViewName> ContentViews { get; set; } = [];
    private List<ContentType> ContentTypes { get; set; } = [];
    private List<Tab> OrderedTabs { get; set; } = [];
    private Dictionary<int, Tab> TabIndex { get; set; } = new();
    private bool ShowDeleteButton { get; set; }
    private int SelectedTabIndex { get; set; }
    private RadzenTabs Tabs { get; set; } = default!;
    private Dictionary<string, IContentProperty> ContentProperties { get; set; } = [];
    private AuthenticationState AuthState { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        AuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ContentProperties = ExtensionManager.GetInstances<IContentProperty>(true);
        
        if (ContentTypeId != null)
        {
            ContentType = await Mediator.Send(new GetContentTypeCommand { Id = ContentTypeId.Value });
            ShowDeleteButton = true;
        }
        else
        {
            ContentType = new ContentType();
        }

        if (CopyContentTypeId != null)
        {
            // Should this be done here?
            var contentTypeToCopy = await Mediator.Send(new GetContentTypeCommand { Id = CopyContentTypeId.Value });
            ContentType = contentTypeToCopy;
            ContentType.Name = string.Concat("Copy Of ", contentTypeToCopy.Name);
            ContentType.Alias = string.Concat("CopyOf", contentTypeToCopy.Alias);
            ContentType.Id = Guid.NewGuid().NewSequentialGuid();
        }

        var contentTypes = await Mediator.Send(new QueryContentTypesCommand { ElementTypesOnly = false, OrderBy = GetContentTypesOrderBy.Name, AmountPerPage = 1000});
        ContentTypes.AddRange(contentTypes.Items);
        
        InitializeTabs();
        InitializeContentViews();
        SortTabsInOrder();
    }

    protected override void OnInitialized()
    {
        Layout?.SetSection(Constants.Sections.SettingsSection);
    }
    
    private async Task SelectIcon()
    {
        var dialog = DialogService.OpenSidePanel<ListMaterialIconsDialog>("Choose Icon");
        var result = await dialog.Result;
        if (result is { Confirmed: true, Data: string icon })
        {
            ContentType.Icon = icon;
        }
    }

    private readonly SlugHelper _slugHelper = new(new SlugHelper.Config
    {
        CharacterReplacements = new Dictionary<string, string> { { " ", "" } },
        UseCamelCase = true
    });

    private void TabChange(int i)
    {
        SelectedTabIndex = i;
    }

    private void InitializeTabs()
    {
        // Now reset sort orders to be correct
        foreach (var tab in ContentType.Tabs.Where(x => !x.IsSystemTab))
        {
            var contentProperties = ContentType.ContentProperties
                .Where(x => x.TabId == tab.Id)
                .OrderBy(x => x.SortOrder)
                .ToList();

            for (var i = 0; i < contentProperties.Count; i++)
            {
                var contentProperty = contentProperties[i];
                contentProperty.SortOrder = i + 1;
            }
        }
    }

    private void InitializeContentViews()
    {
        var allContentViews = ExtensionManager.GetInstances<IContentView>();
        ContentViews = allContentViews.Values.Select(x =>
            {
                var type = x.GetType();
                return new ContentViewName
                {
                    // Get the name of the component
                    Name = type.Name,
                    // Get the full name of the component
                    FullName = type.FullName!
                };
            })
            .OrderBy(x => x.Name)
            .ToList();
    }

    private void SortTabsInOrder()
    {
        TabIndex.Clear();
        
        var tabs = ContentType.Tabs.OrderBy(x => x.SortOrder).ToList();
        @for (var i = 0; i < tabs.Count; i++)
        {
            var tab = tabs[i];
            TabIndex.TryAdd(i, tab);
        }
        
        OrderedTabs = tabs;
    }

    private void SortProperty(PropertyType property, bool moveDown)
    {
        var propertiesInSameTab = ContentType.ContentProperties
            .Where(p => p.TabId == property.TabId)
            .OrderBy(p => p.SortOrder)
            .ToList();

        var index = propertiesInSameTab.IndexOf(property);

        if (!moveDown && index > 0)
        {
            // Moving up
            var previousProperty = propertiesInSameTab[index - 1];
            previousProperty.SortOrder++;
            property.SortOrder--;
        }
        else if (moveDown && index < propertiesInSameTab.Count - 1)
        {
            // Moving down
            var nextProperty = propertiesInSameTab[index + 1];
            nextProperty.SortOrder--;
            property.SortOrder++;
        }

        Tabs.Reload();
    }


    private void DeleteProperty(PropertyType property)
    {
        // Remove the specified property from the list
        ContentType.ContentProperties.Remove(property);

        // Get properties in the same tab and re-adjust their sort orders
        var propertiesInSameTab = ContentType.ContentProperties
            .Where(p => p.TabId == property.TabId)
            .OrderBy(p => p.SortOrder)
            .ToList();

        for (var i = 0; i < propertiesInSameTab.Count; i++)
        {
            propertiesInSameTab[i].SortOrder = i + 1;
        }

        // Reload Tabs and update state
        Tabs.Reload();
    }

    private async Task ChangeTab(PropertyType property)
    {
        var dialog = DialogService.OpenSidePanel<ChangeTab>("Change Tab",
            new Dictionary<string, object>
            {
                { "ContentTypeId", ContentType.Id },
                {
                    "Tabs", ContentType.Tabs
                        .Where(x => !x.IsSystemTab)
                        .OrderBy(x => x.SortOrder)
                        .ToList()
                }
            });
        var result = await dialog.Result;
        if (result is { Confirmed: true, Data: Guid newTabId })
        {
            property.TabId = newTabId;
            Tabs.Reload();
        }
    }

    private async Task Settings(PropertyType property)
    {
        var dialog = DialogService.OpenSidePanel<ContentTypePropertySettingsEditor>("Edit Settings",
            new Dictionary<string, object> { { "PropertyType", property } });
        var result = await dialog.Result;
        if (result is { Confirmed: true, Data: string settings })
        {
            property.Settings = settings;
        }
    }

    private void DeleteTab(Tab tab)
    {
        // Remove the specified tab from the list of tabs
        ContentType.Tabs.Remove(tab);

        SortTabsInOrder();
    }

    private async Task Save()
    {
        if (await ValidateService.CanSave(ContentType))
        {
            var saveContentTypeCommand = new SaveContentTypeCommand { ContentType = ContentType };
            var result = await Mediator.Send(saveContentTypeCommand);
            NotificationService.Notify(result.Success ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"{ContentType.Name} Saved", Detail = "", Duration = 4000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"{ContentType.Name} Error", Detail = result.Messages.MessagesAsString(), Duration = 4000 });
            await AppState.NotifyContentTypeSaved(ContentType, AuthState.User.Identity?.Name!);
        }
    }

    private async Task DeleteContentType()
    {
        // Check no content is using it first
        var contentUsingContentType = await Mediator.Send(new QueryContentCommand { ContentTypeId = ContentType.Id });
        if (contentUsingContentType.Items.Any())
        {
            // Display error message
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"Delete Error", Detail = "Unable to delete, because this ContentType is being used", Duration = 4000 });
        }
        else
        {
            var result = await Mediator.Send(new DeleteContentTypeCommand { ContentTypeId = ContentType.Id });
            NotificationService.Notify(result.Success ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"{ContentType.Name} Deleted", Detail = "", Duration = 4000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"{ContentType.Name} Error", Detail = result.Messages.MessagesAsString(), Duration = 4000 });

            if (result.Success)
            {
                await AppState.NotifyContentTypeDeleted(null, AuthState.User.Identity?.Name!);
                NavigationManager.NavigateTo("/admin/settings");
            }
        }
        
        NavigationManager.NavigateTo("/admin/settings", forceLoad: true);
    }

    private async Task AddEditTab(Tab? tab)
    {
        var dialog = DialogService.OpenSidePanel<AddTab>("Update Tab",
            new Dictionary<string, object>
            {
                { "Tab", tab! },
                { "DefaultSortOrder", tab?.SortOrder ?? ContentType.Tabs.Count(x => !x.IsSystemTab) + 1 }
            });
        var result = await dialog.Result;
        if (result is { Confirmed: true, Data: Tab newTab })
        {
            if (!newTab.Name.IsNullOrWhiteSpace())
            {
                if (tab != null)
                {
                    // Find and update the tab
                    var index = ContentType.Tabs.FindIndex(x => x.Id == tab.Id);
                    if (index != -1)
                    {
                        ContentType.Tabs[index] = newTab;
                    }
                }
                else
                {
                    // Add the new tab to the list of tabs
                    ContentType.Tabs.Add(newTab);
                }
                SortTabsInOrder();
            }
        }
        StateHasChanged();
    }

    private async Task AddProperty()
    {
        if (ContentType.Tabs.All(x => x.IsSystemTab))
        {
            NotificationService.ShowNotification("You need to add a tab", NotificationSeverity.Info);
        }
        else
        {
            var dialog = DialogService.OpenSidePanel<ListContentTypeProperties>("Add Property");
            var result = await dialog.Result;
            if (result is { Confirmed: true, Data: IContentProperty property })
            {
                var tabToAddTo = TabIndex[SelectedTabIndex];
                ContentType.ContentProperties.Add(new PropertyType
                {
                    Component = property.GetType().FullName ?? string.Empty,
                    SortOrder = ContentType.ContentProperties.Count + 1,
                    TabId = tabToAddTo.Id
                });
                Tabs.Reload();
                StateHasChanged();
            }
        }
    }

    private class ContentViewName
    {
        public string Name { get; set; } = string.Empty;
        public string FullName { get; set; } = string.Empty;
    }

}