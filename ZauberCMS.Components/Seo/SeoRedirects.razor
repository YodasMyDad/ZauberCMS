@attribute [Route(Urls.AdminSeoRedirects)]
@using ZauberCMS.Components.Seo.Dialogs
@using ZauberCMS.Core.Seo.Models
@using ZauberCMS.Core.Data.Commands
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Seo.Commands
@using ZauberCMS.Core

@layout SectionLayout

<PageTitle>SEO Redirects</PageTitle>

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Reverse="true" Gap="5" Style="margin-top: 0; padding-top: 0; padding-bottom: 10px;">
    <RadzenButton Variant="Variant.Filled" Text="Create Redirect" Click="@(() => OpenEditor(null))"/>
</RadzenStack>

<RadzenPanel Class="rz-mx-auto">
    <RadzenDataGrid @ref="Grid" AllowFiltering="true"
                    FilterPopupRenderMode="PopupRenderMode.Initial"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowPaging="true"
                    PageSize="@AmountPerPage"
                    AllowSorting="true"
                    LoadData="@LoadData"
                    IsLoading="@IsLoading"
                    Count="@Count"
                    Data="@SeoRedirectsList"
                    SelectionMode="DataGridSelectionMode.Single"
                    RowSelect="@((SeoRedirect value) => OnRowSelect(value))"
                    PagerHorizontalAlign="HorizontalAlign.Center">
        @*@bind-Value="@SelectedContent"*@
        <Columns>
            <RadzenDataGridColumn Property="DomainId" Title="Domain">
                <Template Context="data">
                    @if (data.DomainId.HasValue)
                    {
                        if (Domains.TryGetValue(data.DomainId.Value, out var domain))
                        {
                            @domain.Url
                        }
                    }
                    else
                    {
                        @("Any")
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="FromUrl" Title="From Url">
                <Template Context="data">
                    @data.FromUrl
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="ToUrl" Title="To Url">
                <Template Context="data">
                    @data.ToUrl
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="IsPermanent" Title="Redirect Type">
                <Template Context="data">
                    @(data.IsPermanent ? "301" : "302")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="DateUpdated" Title="Last Updated">
                <Template Context="data">
                    @data.DateUpdated.Humanize()
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Id" Title="Delete" Width="90px" TextAlign="TextAlign.Center">
                <Template Context="data">
                    <RadzenButton Variant="Variant.Text" Size="ButtonSize.Small" Text="Delete" Click="@(() => Delete(data.Id))"/>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenPanel>

@code {
    [CascadingParameter] IModalService ModalService { get; set; } = null!;
    [CascadingParameter] protected SectionLayout? Layout { get; set; }
    [Inject] public NotificationService NotificationService { get; set; } = null!;
    
    private int AmountPerPage { get; set; }
    private int Count { get; set; } 
    private bool IsLoading { get; set; } = false;
    private IEnumerable<SeoRedirect> SeoRedirectsList { get; set; } = [];
    private Dictionary<Guid, Domain> Domains { get; set; } = [];
    private RadzenDataGrid<SeoRedirect> Grid { get; set; } = null!;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData(new LoadDataArgs {Top = AmountPerPage});
        Layout?.SetSection(Constants.Sections.SettingsSection);
        var domains = await Mediator.Send(new QueryDomainCommand{AmountPerPage = 100});
        Domains = domains.Items.ToDictionary(x => x.Id, x => x);
    }
    
    async Task LoadData(LoadDataArgs args)
    {
        IsLoading = true;

        await Task.Yield();

        var command = new DataGridCommand<SeoRedirect>();
        
        if (args.Top != null && args.Top != 0)
        {
            command.Take = args.Top.Value;
        }

        if (args.Skip != null)
        {
            command.Skip = args.Skip.Value;
        }

        // Filter via the Where method
        if (!string.IsNullOrEmpty(args.Filter))
        {
            // Filter via the Where method
            command.Filter = args.Filter;
        }

        // Sort via the OrderBy method
        command.OrderBy = !string.IsNullOrEmpty(args.OrderBy) ? args.OrderBy : "DateUpdated desc";

        var result = await Mediator.Send(command);
        Count = result.Count;
        SeoRedirectsList = result.Items;

        IsLoading = false;
    }
    
    private async Task OnRowSelect(object value)
    {
        if (value is SeoRedirect selectedRow)
        {
            await OpenEditor(selectedRow);
        }
    }

    private async Task OpenEditor(SeoRedirect? seoRedirect)
    {
        var parameters = new Dictionary<string, object>();
        
        if (seoRedirect != null)
        {
            parameters.Add(nameof(AddEditRedirect.Redirect), seoRedirect);
        }

        var modal = ModalService.OpenSidePanel<AddEditRedirect>(seoRedirect == null ? "Create" : "Add" + " Redirect", parameters);
        var result = await modal.Result;
        if (result is { Confirmed: true, Data: SeoRedirect redirect })
        {
            var saveResult = await Mediator.Send(new SaveRedirectCommand { Redirect = redirect });
            if (saveResult.Success)
            {
                NotificationService.ShowSuccessNotification("Redirect Saved");
                await Grid.Reload();
            }
            else
            {
                NotificationService.ShowNotifications(saveResult.Messages);
            }
        }        
    }
    
    private async Task Delete(Guid id)
    {
        var deleteRedirectResult = await Mediator.Send(new DeleteRedirectCommand{ Id = id });
        if (!deleteRedirectResult.Success)
        {
            NotificationService.ShowNotifications(deleteRedirectResult.Messages);
        }
        else
        {
            await Grid.Reload();
        }
    }

}