<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="/"/>
    @if (IsAdmin)
    {
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
        <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
        @* Need to figure out how we can get these a better way *@
        <link rel="stylesheet" href="_content/ZauberCMS.Components/ZauberCMS.Components.bundle.scp.css">
        <link rel="stylesheet" href="_content/ZauberCMS.Components/css/admin.css">
        <link rel="stylesheet" href="_content/Blazored.Modal/Blazored.Modal.bundle.scp.css">
    }
    <HeadOutlet @rendermode="RenderModeForPage"/>
</head>

<body>

<CascadingValue Value="IsAdmin">
    <Routes @rendermode="RenderModeForPage"/>
</CascadingValue>

<div id="reconnect-modal" style="display: none;"></div>
<script src="_framework/blazor.web.js"></script>
<script>
    // Wait until a 'reload' button appears
    new MutationObserver((mutations, observer) => {
        if (document.querySelector('#components-reconnect-modal h5')) {
            // Now every 10 seconds, see if the server appears to be back, and if so, reload
            async function attemptReload() {
                await fetch(''); // Check the server really is back
                location.reload();
            }
            observer.disconnect();
            attemptReload();
            setInterval(attemptReload, 2000);
        }
    }).observe(document.body, { childList: true, subtree: true });
</script>

@if (IsAdmin)
{
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Colors).Assembly.GetName().Version)"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.3/Sortable.min.js"></script>
}
</body>

</html>

@code {

    private bool IsAdmin
    {
        get
        {
            // Get the relative path from the NavigationManager's URI
            var absoluteUri = new Uri(NavigationManager.Uri);
            var requestPathSpan = absoluteUri.LocalPath.AsSpan();
            return requestPathSpan.StartsWith(Constants.Urls.AdminBaseUrl, StringComparison.OrdinalIgnoreCase);
        }
    }

    // Set the Admin to InteractiveServer but use SSR for rest of site
    private IComponentRenderMode? RenderModeForPage => IsAdmin ? InteractiveServer : null;
}